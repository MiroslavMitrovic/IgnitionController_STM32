
IgnitionController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000440c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004598  08004598  00014598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d8  080045d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e0  080045e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000b8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a115  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b9f  00000000  00000000  0002a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000998  00000000  00000000  0002c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f6f  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce43  00000000  00000000  0004f0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a5c  00000000  00000000  0005bf22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012597e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f9c  00000000  00000000  001259d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800457c 	.word	0x0800457c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800457c 	.word	0x0800457c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <Calculate_u_Microseconds>:
//static uint8_t IgnitionControl_SecondSensorCheck(void);
/*To check if the sensors are in sync*/
static uint8_t IgntionControl_SyncCheck(void);

inline uint32_t Calculate_u_Microseconds(uint32_t MicrosecondsTicks)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	return MicrosecondsTicks << 8; //Frequency is set @ 168MHz and prescaler is 168. Counter is 255->256uS per tick.
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	021b      	lsls	r3, r3, #8
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <IgnitionControl_v_Main>:

void IgnitionControl_v_Main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	Firing_v_Handler();
 8000ef0:	f000 f9d4 	bl	800129c <Firing_v_Handler>
	Calculation_v_Handler();
 8000ef4:	f000 f8c0 	bl	8001078 <Calculation_v_Handler>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <IgnitionControl_FirstSensorCheck>:
static uint8_t IgnitionControl_FirstSensorCheck(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	uint8_t l_status = E_NOK;
 8000f02:	2301      	movs	r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
	static uint8_t l_isSignalToggled = 0;

	if(0 == l_isSignalToggled)
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <IgnitionControl_FirstSensorCheck+0xdc>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d14b      	bne.n	8000fa6 <IgnitionControl_FirstSensorCheck+0xaa>
	{
		if( GPIO_PIN_SET == HAL_GPIO_ReadPin(Signal_1_GPIO_Port, Signal_1_Pin) )
 8000f0e:	2110      	movs	r1, #16
 8000f10:	4832      	ldr	r0, [pc, #200]	; (8000fdc <IgnitionControl_FirstSensorCheck+0xe0>)
 8000f12:	f001 fa7d 	bl	8002410 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d144      	bne.n	8000fa6 <IgnitionControl_FirstSensorCheck+0xaa>
		{
			//signal debouncing time 256uS times the debounce multiplier value
			if(SIGNAL_DEBOUNCE_MULTIPLIER < g_uSDebouncingSignalCounter)
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <IgnitionControl_FirstSensorCheck+0xe4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d040      	beq.n	8000fa6 <IgnitionControl_FirstSensorCheck+0xaa>
			{
				g_uSDebouncingSignalCounter = 0;
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <IgnitionControl_FirstSensorCheck+0xe4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
				if( GPIO_PIN_SET == HAL_GPIO_ReadPin(Signal_1_GPIO_Port, Signal_1_Pin) )
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	482b      	ldr	r0, [pc, #172]	; (8000fdc <IgnitionControl_FirstSensorCheck+0xe0>)
 8000f2e:	f001 fa6f 	bl	8002410 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d136      	bne.n	8000fa6 <IgnitionControl_FirstSensorCheck+0xaa>
				{
					l_isSignalToggled = 1;
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <IgnitionControl_FirstSensorCheck+0xdc>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
					//removed since sensor readout is used as RPM reference, not as firing angle signal
					//g_usSinceDetection = 0; //reset to zero to start calculating time to first cylinder firing
					g_FirstSensorTime_us = Calculate_u_Microseconds(g_uSCounter);
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <IgnitionControl_FirstSensorCheck+0xe8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ffc6 	bl	8000ed4 <Calculate_u_Microseconds>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <IgnitionControl_FirstSensorCheck+0xec>)
 8000f4c:	6013      	str	r3, [r2, #0]
					l_status = E_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
					g_SignalFlag |=  1 << SENSOR_1_AVAILABLE;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <IgnitionControl_FirstSensorCheck+0xf0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <IgnitionControl_FirstSensorCheck+0xf0>)
 8000f5e:	701a      	strb	r2, [r3, #0]
					g_SyncFlag |= 1 << SENSOR_1_AVAILABLE;
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <IgnitionControl_FirstSensorCheck+0xf4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <IgnitionControl_FirstSensorCheck+0xf4>)
 8000f6c:	701a      	strb	r2, [r3, #0]
					g_SensorActivationCounter++; //counter to measure how many times Signal occurred
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <IgnitionControl_FirstSensorCheck+0xf8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <IgnitionControl_FirstSensorCheck+0xf8>)
 8000f76:	6013      	str	r3, [r2, #0]

					if(g_SignalState == 0)
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <IgnitionControl_FirstSensorCheck+0xfc>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d107      	bne.n	8000f90 <IgnitionControl_FirstSensorCheck+0x94>
					{
						g_FirstSensorTimePrevious_us = g_FirstSensorTime_us;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <IgnitionControl_FirstSensorCheck+0xec>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <IgnitionControl_FirstSensorCheck+0x100>)
 8000f86:	6013      	str	r3, [r2, #0]
						g_SignalState = 1;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <IgnitionControl_FirstSensorCheck+0xfc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e00a      	b.n	8000fa6 <IgnitionControl_FirstSensorCheck+0xaa>
					}
					else if ( (g_SignalState == 1) /*&& (GPIO_PIN_SET == HAL_GPIO_ReadPin(Signal_1_GPIO_Port, Signal_1_Pin))*/)
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <IgnitionControl_FirstSensorCheck+0xfc>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d106      	bne.n	8000fa6 <IgnitionControl_FirstSensorCheck+0xaa>
					{
						g_FirstSensorTimeCurrent_us = g_FirstSensorTime_us;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <IgnitionControl_FirstSensorCheck+0xec>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <IgnitionControl_FirstSensorCheck+0x104>)
 8000f9e:	6013      	str	r3, [r2, #0]
						g_SignalState = 2;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <IgnitionControl_FirstSensorCheck+0xfc>)
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	701a      	strb	r2, [r3, #0]
		else
		{

		}
	}
	if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(Signal_1_GPIO_Port, Signal_1_Pin))
 8000fa6:	2110      	movs	r1, #16
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <IgnitionControl_FirstSensorCheck+0xe0>)
 8000faa:	f001 fa31 	bl	8002410 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10b      	bne.n	8000fcc <IgnitionControl_FirstSensorCheck+0xd0>
	{
		//To clear a BIT to have status when it is OFF

		l_isSignalToggled = 0;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <IgnitionControl_FirstSensorCheck+0xdc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
		l_status = E_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71fb      	strb	r3, [r7, #7]
		g_SignalFlag &=  ~(1 << SENSOR_1_AVAILABLE);
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <IgnitionControl_FirstSensorCheck+0xf0>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <IgnitionControl_FirstSensorCheck+0xf0>)
 8000fca:	701a      	strb	r2, [r3, #0]
	}
	else
	{  }

	return l_status;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000a3 	.word	0x200000a3
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	200000bc 	.word	0x200000bc
 8000fe4:	200000b8 	.word	0x200000b8
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	200000a2 	.word	0x200000a2
 8000ff4:	20000094 	.word	0x20000094
 8000ff8:	200000a1 	.word	0x200000a1
 8000ffc:	2000008c 	.word	0x2000008c
 8001000:	20000090 	.word	0x20000090

08001004 <IgntionControl_SyncCheck>:
//    }
//  return l_status;
//}

uint8_t IgntionControl_SyncCheck(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
     uint8_t l_status = E_OK; 
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
     
     if( g_SyncFlag == (1 << SENSOR_1_AVAILABLE) )
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <IgntionControl_SyncCheck+0x5c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d112      	bne.n	800103c <IgntionControl_SyncCheck+0x38>
     {
         g_SyncFlag = 0; //Clear the flag 
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <IgntionControl_SyncCheck+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
         l_status = E_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	71fb      	strb	r3, [r7, #7]
         /*Sensor Activated 2 times */
         if( (g_SensorActivationCounter >= 2) && (g_FirstSensorTimePrevious_us != g_FirstSensorTimeCurrent_us) )
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <IgntionControl_SyncCheck+0x60>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d913      	bls.n	8001050 <IgntionControl_SyncCheck+0x4c>
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <IgntionControl_SyncCheck+0x64>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <IgntionControl_SyncCheck+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d00d      	beq.n	8001050 <IgntionControl_SyncCheck+0x4c>
         {
              GlobalDataValues.SynchronizationStatus = IN_SYNC;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <IgntionControl_SyncCheck+0x6c>)
 8001036:	2201      	movs	r2, #1
 8001038:	711a      	strb	r2, [r3, #4]
 800103a:	e009      	b.n	8001050 <IgntionControl_SyncCheck+0x4c>
             //do nothing
         }
     }
     else
     {
         GlobalDataValues.SynchronizationStatus = OUT_OF_SYNC;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <IgntionControl_SyncCheck+0x6c>)
 800103e:	2200      	movs	r2, #0
 8001040:	711a      	strb	r2, [r3, #4]
         g_LostSyncCounter++;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <IgntionControl_SyncCheck+0x70>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <IgntionControl_SyncCheck+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
         l_status = E_NOK;
 800104c:	2301      	movs	r3, #1
 800104e:	71fb      	strb	r3, [r7, #7]
     }
     return l_status; 
 8001050:	79fb      	ldrb	r3, [r7, #7]
    
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200000a2 	.word	0x200000a2
 8001064:	20000094 	.word	0x20000094
 8001068:	2000008c 	.word	0x2000008c
 800106c:	20000090 	.word	0x20000090
 8001070:	200000c0 	.word	0x200000c0
 8001074:	20000098 	.word	0x20000098

08001078 <Calculation_v_Handler>:

static void Calculation_v_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
    uint8_t l_Result = 0; 
 800107e:	2300      	movs	r3, #0
 8001080:	71fb      	strb	r3, [r7, #7]
    const uint16_t OneRevolutionAngleInDeg = 360; 
 8001082:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001086:	80bb      	strh	r3, [r7, #4]
    const uint16_t SecondCylinderAngleinDeg = 90;
 8001088:	235a      	movs	r3, #90	; 0x5a
 800108a:	807b      	strh	r3, [r7, #2]
    volatile static uint32_t OneRevolutionTimeCylinder1 = 0;
    volatile static uint32_t OneRevolutionTimeCylinder2 = 0;
    volatile uint8_t AdvanceAngleCalculatedTime = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	707b      	strb	r3, [r7, #1]
    

    GlobalDataValues.Microseconds = Calculate_u_Microseconds(g_uSCounter);
 8001090:	4b78      	ldr	r3, [pc, #480]	; (8001274 <Calculation_v_Handler+0x1fc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff1d 	bl	8000ed4 <Calculate_u_Microseconds>
 800109a:	4603      	mov	r3, r0
 800109c:	4a76      	ldr	r2, [pc, #472]	; (8001278 <Calculation_v_Handler+0x200>)
 800109e:	6093      	str	r3, [r2, #8]

    switch(GlobalDataValues.CalculationState)
 80010a0:	4b75      	ldr	r3, [pc, #468]	; (8001278 <Calculation_v_Handler+0x200>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	3b01      	subs	r3, #1
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	f200 80d7 	bhi.w	800125c <Calculation_v_Handler+0x1e4>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <Calculation_v_Handler+0x3c>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010d5 	.word	0x080010d5
 80010bc:	080010ff 	.word	0x080010ff
 80010c0:	080011a3 	.word	0x080011a3
 80010c4:	0800124f 	.word	0x0800124f
 80010c8:	0800125d 	.word	0x0800125d
    {
        case en_InitFinished:
        GlobalDataValues.CalculationState = en_SynchronizationOngoing;
 80010cc:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <Calculation_v_Handler+0x200>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	701a      	strb	r2, [r3, #0]
        break;
 80010d2:	e0ca      	b.n	800126a <Calculation_v_Handler+0x1f2>
        case    en_SynchronizationOngoing:
#ifdef STM_INTERRUPT
        	IgnitionControl_u_FirstSensorCheck_IT();
#else
        	l_Result = IgnitionControl_FirstSensorCheck();
 80010d4:	f7ff ff12 	bl	8000efc <IgnitionControl_FirstSensorCheck>
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
#endif /*STM_INTERRUPT*/
        	l_Result = IgntionControl_SyncCheck();
 80010dc:	f7ff ff92 	bl	8001004 <IgntionControl_SyncCheck>
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
        if( IN_SYNC == GlobalDataValues.SynchronizationStatus)
 80010e4:	4b64      	ldr	r3, [pc, #400]	; (8001278 <Calculation_v_Handler+0x200>)
 80010e6:	791b      	ldrb	r3, [r3, #4]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	f040 80b8 	bne.w	8001260 <Calculation_v_Handler+0x1e8>
        {
             GlobalDataValues.CalculationState = en_Synchronized;
 80010f0:	4b61      	ldr	r3, [pc, #388]	; (8001278 <Calculation_v_Handler+0x200>)
 80010f2:	2203      	movs	r2, #3
 80010f4:	701a      	strb	r2, [r3, #0]
            g_usSinceDetection = 0; //reset to zero to start calculating time to first cylinder firing
 80010f6:	4b61      	ldr	r3, [pc, #388]	; (800127c <Calculation_v_Handler+0x204>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
        }
        else
        {            //do nothing
        }
        break;
 80010fc:	e0b0      	b.n	8001260 <Calculation_v_Handler+0x1e8>

        case en_Synchronized:
         l_Result = IgnitionControl_FirstSensorCheck();
 80010fe:	f7ff fefd 	bl	8000efc <IgnitionControl_FirstSensorCheck>
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]

        // Again the calculation due to issue with below condition triggering randomly.
         GlobalDataValues.Microseconds = Calculate_u_Microseconds(g_uSCounter);
 8001106:	4b5b      	ldr	r3, [pc, #364]	; (8001274 <Calculation_v_Handler+0x1fc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fee2 	bl	8000ed4 <Calculate_u_Microseconds>
 8001110:	4603      	mov	r3, r0
 8001112:	4a59      	ldr	r2, [pc, #356]	; (8001278 <Calculation_v_Handler+0x200>)
 8001114:	6093      	str	r3, [r2, #8]
      	//If more than 2 Seconds have passed, disable the signal and set status to out of sync
         if( MAX_TIME_FOR_SIGNAL_AVAILABILITY <= (GlobalDataValues.Microseconds - g_FirstSensorTimeCurrent_us) )
 8001116:	4b58      	ldr	r3, [pc, #352]	; (8001278 <Calculation_v_Handler+0x200>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	4b59      	ldr	r3, [pc, #356]	; (8001280 <Calculation_v_Handler+0x208>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	4a58      	ldr	r2, [pc, #352]	; (8001284 <Calculation_v_Handler+0x20c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d91f      	bls.n	8001166 <Calculation_v_Handler+0xee>
     	{
     		g_SignalFlag &= ~(1 << SENSOR_1_AVAILABLE) ;
 8001126:	4b58      	ldr	r3, [pc, #352]	; (8001288 <Calculation_v_Handler+0x210>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b55      	ldr	r3, [pc, #340]	; (8001288 <Calculation_v_Handler+0x210>)
 8001132:	701a      	strb	r2, [r3, #0]
     		g_SyncFlag &= ~(1 << SENSOR_1_AVAILABLE) ;
 8001134:	4b55      	ldr	r3, [pc, #340]	; (800128c <Calculation_v_Handler+0x214>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b53      	ldr	r3, [pc, #332]	; (800128c <Calculation_v_Handler+0x214>)
 8001140:	701a      	strb	r2, [r3, #0]
     		GlobalDataValues.SynchronizationStatus = OUT_OF_SYNC;
 8001142:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <Calculation_v_Handler+0x200>)
 8001144:	2200      	movs	r2, #0
 8001146:	711a      	strb	r2, [r3, #4]
     		GlobalDataValues.Microseconds = 0; //reset Microseconds counter to start from beginning to count the difference
 8001148:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <Calculation_v_Handler+0x200>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
     		GlobalDataValues.RPM = 0;
 800114e:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <Calculation_v_Handler+0x200>)
 8001150:	2200      	movs	r2, #0
 8001152:	805a      	strh	r2, [r3, #2]
     		g_FirstSensorTimeCurrent_us = 0;
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <Calculation_v_Handler+0x208>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
     		g_FirstSensorTimePrevious_us = 0;
 800115a:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <Calculation_v_Handler+0x218>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
     		g_uSCounter = 0;
 8001160:	4b44      	ldr	r3, [pc, #272]	; (8001274 <Calculation_v_Handler+0x1fc>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
     	}

         if(g_FirstSensorTimeCurrent_us != g_FirstSensorTimePrevious_us)
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <Calculation_v_Handler+0x208>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <Calculation_v_Handler+0x218>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d005      	beq.n	800117e <Calculation_v_Handler+0x106>
         {
         GlobalDataValues.RPM = Calculate_u_RPM();
 8001172:	f000 f8c1 	bl	80012f8 <Calculate_u_RPM>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <Calculation_v_Handler+0x200>)
 800117c:	805a      	strh	r2, [r3, #2]
         }
         if (30 <  GlobalDataValues.RPM )
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <Calculation_v_Handler+0x200>)
 8001180:	885b      	ldrh	r3, [r3, #2]
 8001182:	b29b      	uxth	r3, r3
 8001184:	2b1e      	cmp	r3, #30
 8001186:	d903      	bls.n	8001190 <Calculation_v_Handler+0x118>
         {
         GlobalDataValues.CalculationState = en_CalculationOngoing;
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <Calculation_v_Handler+0x200>)
 800118a:	2204      	movs	r2, #4
 800118c:	701a      	strb	r2, [r3, #0]
         }
         else if( OUT_OF_SYNC == GlobalDataValues.SynchronizationStatus)
         {
        	 GlobalDataValues.CalculationState = en_SynchronizationOngoing;
         }
         break;
 800118e:	e069      	b.n	8001264 <Calculation_v_Handler+0x1ec>
         else if( OUT_OF_SYNC == GlobalDataValues.SynchronizationStatus)
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <Calculation_v_Handler+0x200>)
 8001192:	791b      	ldrb	r3, [r3, #4]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d164      	bne.n	8001264 <Calculation_v_Handler+0x1ec>
        	 GlobalDataValues.CalculationState = en_SynchronizationOngoing;
 800119a:	4b37      	ldr	r3, [pc, #220]	; (8001278 <Calculation_v_Handler+0x200>)
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]
         break;
 80011a0:	e060      	b.n	8001264 <Calculation_v_Handler+0x1ec>

        case en_CalculationOngoing:
            // 1. Get the Advance angle
#ifdef USING_ADVANCE_TIMING
        	GlobalDataValues.AdvanceAngle = get_u_AdvanceAngle(GlobalDataValues.RPM);
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <Calculation_v_Handler+0x200>)
 80011a4:	885b      	ldrh	r3, [r3, #2]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f939 	bl	8001420 <get_u_AdvanceAngle>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b31      	ldr	r3, [pc, #196]	; (8001278 <Calculation_v_Handler+0x200>)
 80011b4:	715a      	strb	r2, [r3, #5]
            AdvanceAngleCalculatedTime =  CalculateTime_u_FromAngle(GlobalDataValues.RPM, GlobalDataValues.AdvanceAngle);
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <Calculation_v_Handler+0x200>)
 80011b8:	885b      	ldrh	r3, [r3, #2]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4a2e      	ldr	r2, [pc, #184]	; (8001278 <Calculation_v_Handler+0x200>)
 80011be:	7952      	ldrb	r2, [r2, #5]
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	b292      	uxth	r2, r2
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fa36 	bl	8001638 <CalculateTime_u_FromAngle>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	707b      	strb	r3, [r7, #1]
#ifdef  USING_FIXED_TIMING
        	GlobalDataValues.AdvanceAngle = FIXED_TIMING_ANGLE;
            AdvanceAngleCalculatedTime =  CalculateTime_u_FromAngle(GlobalDataValues.RPM, GlobalDataValues.AdvanceAngle);
#endif /*USING_FIXED_TIMING*/
           // to not have overlaps during firing angle offset of 60deg is added
           OneRevolutionTimeCylinder1 =  CalculateTime_u_FromAngle(GlobalDataValues.RPM, OneRevolutionAngleInDeg + 60);
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <Calculation_v_Handler+0x200>)
 80011d4:	885b      	ldrh	r3, [r3, #2]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	333c      	adds	r3, #60	; 0x3c
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	4610      	mov	r0, r2
 80011e2:	f000 fa29 	bl	8001638 <CalculateTime_u_FromAngle>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a2a      	ldr	r2, [pc, #168]	; (8001294 <Calculation_v_Handler+0x21c>)
 80011ea:	6013      	str	r3, [r2, #0]
           OneRevolutionTimeCylinder2 = CalculateTime_u_FromAngle(GlobalDataValues.RPM, (OneRevolutionAngleInDeg + SecondCylinderAngleinDeg) );
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <Calculation_v_Handler+0x200>)
 80011ee:	885b      	ldrh	r3, [r3, #2]
 80011f0:	b298      	uxth	r0, r3
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	f000 fa1c 	bl	8001638 <CalculateTime_u_FromAngle>
 8001200:	4603      	mov	r3, r0
 8001202:	4a25      	ldr	r2, [pc, #148]	; (8001298 <Calculation_v_Handler+0x220>)
 8001204:	6013      	str	r3, [r2, #0]
           // 2. Calculate Firing time Cyl-1
           GlobalDataValues.FiringTimeCyl_1 = Calculate_u_FiringTimeCylinder(AdvanceAngleCalculatedTime, OneRevolutionTimeCylinder1);
 8001206:	787b      	ldrb	r3, [r7, #1]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <Calculation_v_Handler+0x21c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f000 fa74 	bl	8001700 <Calculate_u_FiringTimeCylinder>
 8001218:	4603      	mov	r3, r0
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <Calculation_v_Handler+0x200>)
 800121c:	60d3      	str	r3, [r2, #12]
           // 3. Calculate Firing time Cyl-2
            GlobalDataValues.FiringTimeCyl_2 = Calculate_u_FiringTimeCylinder(AdvanceAngleCalculatedTime, OneRevolutionTimeCylinder2 );
 800121e:	787b      	ldrb	r3, [r7, #1]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <Calculation_v_Handler+0x220>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f000 fa68 	bl	8001700 <Calculate_u_FiringTimeCylinder>
 8001230:	4603      	mov	r3, r0
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <Calculation_v_Handler+0x200>)
 8001234:	6113      	str	r3, [r2, #16]
            // 4. set state to en_CalculationFinished

            if( (0 < GlobalDataValues.FiringTimeCyl_1) && (0 < GlobalDataValues.FiringTimeCyl_2))
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <Calculation_v_Handler+0x200>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d014      	beq.n	8001268 <Calculation_v_Handler+0x1f0>
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <Calculation_v_Handler+0x200>)
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d010      	beq.n	8001268 <Calculation_v_Handler+0x1f0>
            {
            GlobalDataValues.CalculationState = en_CalculationFinished;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <Calculation_v_Handler+0x200>)
 8001248:	2205      	movs	r2, #5
 800124a:	701a      	strb	r2, [r3, #0]
            }

            break;
 800124c:	e00c      	b.n	8001268 <Calculation_v_Handler+0x1f0>
        case en_CalculationFinished:
        	 GlobalDataValues.CalculationState = en_Synchronized;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <Calculation_v_Handler+0x200>)
 8001250:	2203      	movs	r2, #3
 8001252:	701a      	strb	r2, [r3, #0]
        	 GlobalDataValues.FiringState = en_FiringCylinder1;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <Calculation_v_Handler+0x200>)
 8001256:	2202      	movs	r2, #2
 8001258:	705a      	strb	r2, [r3, #1]
            break;
 800125a:	e006      	b.n	800126a <Calculation_v_Handler+0x1f2>
        case en_IdleStateCalculation:
            //do nothing 
            break;
        default: 
            // should not be reached.
            break; 
 800125c:	bf00      	nop
 800125e:	e004      	b.n	800126a <Calculation_v_Handler+0x1f2>
        break;
 8001260:	bf00      	nop
 8001262:	e002      	b.n	800126a <Calculation_v_Handler+0x1f2>
         break;
 8001264:	bf00      	nop
 8001266:	e000      	b.n	800126a <Calculation_v_Handler+0x1f2>
            break;
 8001268:	bf00      	nop
                   
    }
    
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000b8 	.word	0x200000b8
 8001278:	200000c0 	.word	0x200000c0
 800127c:	200000b4 	.word	0x200000b4
 8001280:	20000090 	.word	0x20000090
 8001284:	001e847f 	.word	0x001e847f
 8001288:	200000a0 	.word	0x200000a0
 800128c:	200000a2 	.word	0x200000a2
 8001290:	2000008c 	.word	0x2000008c
 8001294:	200000a4 	.word	0x200000a4
 8001298:	200000a8 	.word	0x200000a8

0800129c <Firing_v_Handler>:

static void Firing_v_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  
  /*NOTE: PROVE at integration test level if no race condition will occur during
    firing of both cylinders due to faulty handling in FSM or time overlaps
    Additional idea, put both handlers inside of 1 case en_FiringCylinders...*/
   
	 GlobalDataValues.TimeElapsedSinceDetection = g_usSinceDetection << 8;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <Firing_v_Handler+0x50>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <Firing_v_Handler+0x54>)
 80012a8:	6153      	str	r3, [r2, #20]

        switch(GlobalDataValues.FiringState)
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <Firing_v_Handler+0x54>)
 80012ac:	785b      	ldrb	r3, [r3, #1]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	3b01      	subs	r3, #1
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d816      	bhi.n	80012e4 <Firing_v_Handler+0x48>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <Firing_v_Handler+0x20>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012e5 	.word	0x080012e5
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	080012e5 	.word	0x080012e5
 80012c8:	080012d7 	.word	0x080012d7
 80012cc:	080012dd 	.word	0x080012dd
        {
            case en_FiringCylinder1:
               Firing_v_Cylinder1();
 80012d0:	f000 fa26 	bl	8001720 <Firing_v_Cylinder1>
           break;  //remove breaks for runtime improvement
 80012d4:	e007      	b.n	80012e6 <Firing_v_Handler+0x4a>
//                GlobalDataValues.TimeElapsedSinceDetection = 0;
//                g_usSinceDetection = 0;
               // GlobalDataValues.FiringState = en_FiringCylinder2;
            break;
            case en_FiringCylinder2:
                 Firing_v_Cylinder2();
 80012d6:	f000 fa53 	bl	8001780 <Firing_v_Cylinder2>
            break;
 80012da:	e004      	b.n	80012e6 <Firing_v_Handler+0x4a>
            case en_FiringCylinder2Completed:
                GlobalDataValues.FiringState = en_IdleStateFiringState;
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <Firing_v_Handler+0x54>)
 80012de:	2201      	movs	r2, #1
 80012e0:	705a      	strb	r2, [r3, #1]
                
               
            break;
 80012e2:	e000      	b.n	80012e6 <Firing_v_Handler+0x4a>
            
                // do nothing
            break;
            default:
             // should not be reached.
            break;
 80012e4:	bf00      	nop
        }
   
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000b4 	.word	0x200000b4
 80012f0:	200000c0 	.word	0x200000c0
 80012f4:	00000000 	.word	0x00000000

080012f8 <Calculate_u_RPM>:



extern uint16_t Calculate_u_RPM(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
    uint32_t l_TimeDifference_us = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
    uint32_t l_TimeDifference_ms = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
    float l_AngularVelocity = 0.0; 
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
    uint16_t l_CalculatedRPM = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	82fb      	strh	r3, [r7, #22]
    const float alpha = 0.5;
 8001310:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001314:	607b      	str	r3, [r7, #4]
 l_TimeDifference_us = g_FirstSensorTimeCurrent_us - g_FirstSensorTimePrevious_us;
 8001316:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <Calculate_u_RPM+0x110>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <Calculate_u_RPM+0x114>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	613b      	str	r3, [r7, #16]
 l_TimeDifference_ms = l_TimeDifference_us / 1000; 
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4a3a      	ldr	r2, [pc, #232]	; (8001410 <Calculate_u_RPM+0x118>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	60fb      	str	r3, [r7, #12]
 l_AngularVelocity = (2 * M_PI * 1000) /(l_TimeDifference_ms ); //[rad/S]
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff f88c 	bl	800044c <__aeabi_ui2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	a12f      	add	r1, pc, #188	; (adr r1, 80013f8 <Calculate_u_RPM+0x100>)
 800133a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800133e:	f7ff fa29 	bl	8000794 <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fbf1 	bl	8000b30 <__aeabi_d2f>
 800134e:	4603      	mov	r3, r0
 8001350:	60bb      	str	r3, [r7, #8]
 l_CalculatedRPM = (uint16_t) (l_AngularVelocity * 30.0 / M_PI); 
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f7ff f89c 	bl	8000490 <__aeabi_f2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <Calculate_u_RPM+0x11c>)
 800135e:	f7ff f8ef 	bl	8000540 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	a325      	add	r3, pc, #148	; (adr r3, 8001400 <Calculate_u_RPM+0x108>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fa10 	bl	8000794 <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fbb8 	bl	8000af0 <__aeabi_d2uiz>
 8001380:	4603      	mov	r3, r0
 8001382:	82fb      	strh	r3, [r7, #22]
// Moving Average filter
 l_CalculatedRPM =  (uint16_t) (alpha * l_CalculatedRPM  + (1 - alpha) * GlobalDataValues.RPM);
 8001384:	8afb      	ldrh	r3, [r7, #22]
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800139a:	edd7 7a01 	vldr	s15, [r7, #4]
 800139e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <Calculate_u_RPM+0x120>)
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013bc:	ee17 3a90 	vmov	r3, s15
 80013c0:	82fb      	strh	r3, [r7, #22]

 if(MAX_RPM <= l_CalculatedRPM)
 80013c2:	8afb      	ldrh	r3, [r7, #22]
 80013c4:	f242 1233 	movw	r2, #8499	; 0x2133
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d902      	bls.n	80013d2 <Calculate_u_RPM+0xda>
 {
	 l_CalculatedRPM = MAX_RPM;
 80013cc:	f242 1334 	movw	r3, #8500	; 0x2134
 80013d0:	82fb      	strh	r3, [r7, #22]
 }
 else{}
 
 /*Case when the RPM signal is already known, so we need just to update currentTime*/
 if( 2 == g_SignalState )
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <Calculate_u_RPM+0x124>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d106      	bne.n	80013e8 <Calculate_u_RPM+0xf0>
 {
    g_FirstSensorTimePrevious_us = g_FirstSensorTimeCurrent_us;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <Calculate_u_RPM+0x110>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <Calculate_u_RPM+0x114>)
 80013e0:	6013      	str	r3, [r2, #0]
    g_SignalState = 1;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <Calculate_u_RPM+0x124>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
 }
 else{}


#ifdef USING_CRANK_SIGNAL
 return      l_CalculatedRPM;
 80013e8:	8afb      	ldrh	r3, [r7, #22]
#endif/*USING_CRANK_SIGNAL*/
#ifdef USING_CAM_SIGNAL
 return      l_CalculatedRPM * 2 ;
#endif/*USING_CAM_SIGNAL*/
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	f3af 8000 	nop.w
 80013f8:	704a9409 	.word	0x704a9409
 80013fc:	40b88b2f 	.word	0x40b88b2f
 8001400:	54442d18 	.word	0x54442d18
 8001404:	400921fb 	.word	0x400921fb
 8001408:	20000090 	.word	0x20000090
 800140c:	2000008c 	.word	0x2000008c
 8001410:	10624dd3 	.word	0x10624dd3
 8001414:	403e0000 	.word	0x403e0000
 8001418:	200000c0 	.word	0x200000c0
 800141c:	200000a1 	.word	0x200000a1

08001420 <get_u_AdvanceAngle>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


uint8_t get_u_AdvanceAngle(uint16_t in_u8_RPM)
{
 8001420:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001424:	b08a      	sub	sp, #40	; 0x28
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	80fb      	strh	r3, [r7, #6]
        p4 = 1.1505e-05;
        p5 = -0.010326;
        p6 = 0.22854;
*/
    //PORTB |= ( 1<< PB1); //For debug Purposes only
	 uint16_t l_RPMMaxValue = 8500;
 800142c:	f242 1334 	movw	r3, #8500	; 0x2134
 8001430:	84bb      	strh	r3, [r7, #36]	; 0x24
	 uint16_t l_RPMMinValue = 0; 
 8001432:	2300      	movs	r3, #0
 8001434:	847b      	strh	r3, [r7, #34]	; 0x22
     int8_t l_AdvanceAngleInt = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     float l_p1 = -8.0306e-18;
 800143c:	4b78      	ldr	r3, [pc, #480]	; (8001620 <get_u_AdvanceAngle+0x200>)
 800143e:	61fb      	str	r3, [r7, #28]
     float l_p2 =  2.4472e-13;;
 8001440:	4b78      	ldr	r3, [pc, #480]	; (8001624 <get_u_AdvanceAngle+0x204>)
 8001442:	61bb      	str	r3, [r7, #24]
     float l_p3 = -2.6638e-09;
 8001444:	4b78      	ldr	r3, [pc, #480]	; (8001628 <get_u_AdvanceAngle+0x208>)
 8001446:	617b      	str	r3, [r7, #20]
     float l_p4 = 1.1505e-05;
 8001448:	4b78      	ldr	r3, [pc, #480]	; (800162c <get_u_AdvanceAngle+0x20c>)
 800144a:	613b      	str	r3, [r7, #16]
     float l_p5 = -0.010326; 
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <get_u_AdvanceAngle+0x210>)
 800144e:	60fb      	str	r3, [r7, #12]
     float l_p6 = 0.22854;
 8001450:	4b78      	ldr	r3, [pc, #480]	; (8001634 <get_u_AdvanceAngle+0x214>)
 8001452:	60bb      	str	r3, [r7, #8]
     // Check for implausability, this setup shouldn't have values more then 10000RPM.
     if (10000 <= in_u8_RPM)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f242 720f 	movw	r2, #9999	; 0x270f
 800145a:	4293      	cmp	r3, r2
 800145c:	d902      	bls.n	8001464 <get_u_AdvanceAngle+0x44>
     {
         in_u8_RPM = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	e00c      	b.n	800147e <get_u_AdvanceAngle+0x5e>
     }
     else if(l_RPMMaxValue <= in_u8_RPM)
 8001464:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	429a      	cmp	r2, r3
 800146a:	d802      	bhi.n	8001472 <get_u_AdvanceAngle+0x52>
     {
         in_u8_RPM = l_RPMMaxValue;
 800146c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	e005      	b.n	800147e <get_u_AdvanceAngle+0x5e>
     }
     else if(in_u8_RPM <= l_RPMMinValue)
 8001472:	88fa      	ldrh	r2, [r7, #6]
 8001474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001476:	429a      	cmp	r2, r3
 8001478:	d801      	bhi.n	800147e <get_u_AdvanceAngle+0x5e>
     {
         in_u8_RPM = l_RPMMinValue;
 800147a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800147c:	80fb      	strh	r3, [r7, #6]
     else
     {
    	 //Do nothing
     }

     l_AdvanceAngleInt = (int8_t) round( ( ( l_p1 * pow(in_u8_RPM,5) ) + (l_p2 * pow(in_u8_RPM,4))
 800147e:	69f8      	ldr	r0, [r7, #28]
 8001480:	f7ff f806 	bl	8000490 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffde 	bl	800044c <__aeabi_ui2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8001600 <get_u_AdvanceAngle+0x1e0>
 8001498:	ec43 2b10 	vmov	d0, r2, r3
 800149c:	f002 f952 	bl	8003744 <pow>
 80014a0:	ec53 2b10 	vmov	r2, r3, d0
 80014a4:	4620      	mov	r0, r4
 80014a6:	4629      	mov	r1, r5
 80014a8:	f7ff f84a 	bl	8000540 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4690      	mov	r8, r2
 80014b2:	4699      	mov	r9, r3
 80014b4:	69b8      	ldr	r0, [r7, #24]
 80014b6:	f7fe ffeb 	bl	8000490 <__aeabi_f2d>
 80014ba:	4604      	mov	r4, r0
 80014bc:	460d      	mov	r5, r1
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffc3 	bl	800044c <__aeabi_ui2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8001608 <get_u_AdvanceAngle+0x1e8>
 80014ce:	ec43 2b10 	vmov	d0, r2, r3
 80014d2:	f002 f937 	bl	8003744 <pow>
 80014d6:	ec53 2b10 	vmov	r2, r3, d0
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7ff f82f 	bl	8000540 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4640      	mov	r0, r8
 80014e8:	4649      	mov	r1, r9
 80014ea:	f7fe fe73 	bl	80001d4 <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4690      	mov	r8, r2
 80014f4:	4699      	mov	r9, r3
    		 + (l_p3 * pow(in_u8_RPM,3)) + (l_p4 * pow(in_u8_RPM,2)) + (l_p5 * in_u8_RPM) + l_p6  ));
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7fe ffca 	bl	8000490 <__aeabi_f2d>
 80014fc:	4604      	mov	r4, r0
 80014fe:	460d      	mov	r5, r1
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ffa2 	bl	800044c <__aeabi_ui2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001610 <get_u_AdvanceAngle+0x1f0>
 8001510:	ec43 2b10 	vmov	d0, r2, r3
 8001514:	f002 f916 	bl	8003744 <pow>
 8001518:	ec53 2b10 	vmov	r2, r3, d0
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f7ff f80e 	bl	8000540 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4640      	mov	r0, r8
 800152a:	4649      	mov	r1, r9
 800152c:	f7fe fe52 	bl	80001d4 <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4690      	mov	r8, r2
 8001536:	4699      	mov	r9, r3
 8001538:	6938      	ldr	r0, [r7, #16]
 800153a:	f7fe ffa9 	bl	8000490 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ff81 	bl	800044c <__aeabi_ui2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8001618 <get_u_AdvanceAngle+0x1f8>
 8001552:	ec43 2b10 	vmov	d0, r2, r3
 8001556:	f002 f8f5 	bl	8003744 <pow>
 800155a:	ec53 2b10 	vmov	r2, r3, d0
 800155e:	4620      	mov	r0, r4
 8001560:	4629      	mov	r1, r5
 8001562:	f7fe ffed 	bl	8000540 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4640      	mov	r0, r8
 800156c:	4649      	mov	r1, r9
 800156e:	f7fe fe31 	bl	80001d4 <__adddf3>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	edd7 7a03 	vldr	s15, [r7, #12]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	ee17 0a90 	vmov	r0, s15
 8001590:	f7fe ff7e 	bl	8000490 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe1a 	bl	80001d4 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4614      	mov	r4, r2
 80015a6:	461d      	mov	r5, r3
     l_AdvanceAngleInt = (int8_t) round( ( ( l_p1 * pow(in_u8_RPM,5) ) + (l_p2 * pow(in_u8_RPM,4))
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f7fe ff71 	bl	8000490 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe fe0d 	bl	80001d4 <__adddf3>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b17 	vmov	d7, r2, r3
 80015c2:	eeb0 0a47 	vmov.f32	s0, s14
 80015c6:	eef0 0a67 	vmov.f32	s1, s15
 80015ca:	f002 f875 	bl	80036b8 <round>
 80015ce:	ec53 2b10 	vmov	r2, r3, d0
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fa63 	bl	8000aa0 <__aeabi_d2iz>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

     if (0 > l_AdvanceAngleInt)
 80015e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da02      	bge.n	80015ee <get_u_AdvanceAngle+0x1ce>
     {
    	 l_AdvanceAngleInt = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     else
     {
         //do nothing
     }

	 return (uint8_t)l_AdvanceAngleInt;
 80015ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
      
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015fc:	f3af 8000 	nop.w
 8001600:	00000000 	.word	0x00000000
 8001604:	40140000 	.word	0x40140000
 8001608:	00000000 	.word	0x00000000
 800160c:	40100000 	.word	0x40100000
 8001610:	00000000 	.word	0x00000000
 8001614:	40080000 	.word	0x40080000
 8001618:	00000000 	.word	0x00000000
 800161c:	40000000 	.word	0x40000000
 8001620:	a3142370 	.word	0xa3142370
 8001624:	2a89c3de 	.word	0x2a89c3de
 8001628:	b1370e11 	.word	0xb1370e11
 800162c:	37410599 	.word	0x37410599
 8001630:	bc292e62 	.word	0xbc292e62
 8001634:	3e6a0664 	.word	0x3e6a0664

08001638 <CalculateTime_u_FromAngle>:

uint32_t CalculateTime_u_FromAngle(uint16_t in_u16_RPM, uint16_t in_u16_Angle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	460a      	mov	r2, r1
 8001642:	80fb      	strh	r3, [r7, #6]
 8001644:	4613      	mov	r3, r2
 8001646:	80bb      	strh	r3, [r7, #4]
  volatile  float_t l_AngularVelocity = 0;                 //[1/s]
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
    uint32_t l_TimeFor1DegreeTravel = 0;                    //[uS]
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
   volatile uint32_t l_CalculatedTime = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  
    
   l_AngularVelocity = in_u16_RPM / 60.0; 
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff07 	bl	800046c <__aeabi_i2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <CalculateTime_u_FromAngle+0xb8>)
 8001664:	f7ff f896 	bl	8000794 <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff fa5e 	bl	8000b30 <__aeabi_d2f>
 8001674:	4603      	mov	r3, r0
 8001676:	613b      	str	r3, [r7, #16]
   
   if(0 == in_u16_RPM)
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <CalculateTime_u_FromAngle+0x50>
   {
       l_errorCounter++;
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <CalculateTime_u_FromAngle+0xbc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <CalculateTime_u_FromAngle+0xbc>)
 8001686:	6013      	str	r3, [r2, #0]
   }
   
    l_TimeFor1DegreeTravel =(uint32_t) ((1.0 / l_AngularVelocity /360.0) * 1000000.0);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff00 	bl	8000490 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	f04f 0000 	mov.w	r0, #0
 8001698:	4917      	ldr	r1, [pc, #92]	; (80016f8 <CalculateTime_u_FromAngle+0xc0>)
 800169a:	f7ff f87b 	bl	8000794 <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <CalculateTime_u_FromAngle+0xc4>)
 80016ac:	f7ff f872 	bl	8000794 <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	a30b      	add	r3, pc, #44	; (adr r3, 80016e8 <CalculateTime_u_FromAngle+0xb0>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ff3f 	bl	8000540 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa11 	bl	8000af0 <__aeabi_d2uiz>
 80016ce:	4603      	mov	r3, r0
 80016d0:	617b      	str	r3, [r7, #20]
    
    l_CalculatedTime = l_TimeFor1DegreeTravel * in_u16_Angle; 
 80016d2:	88bb      	ldrh	r3, [r7, #4]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]
    
    return l_CalculatedTime;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	00000000 	.word	0x00000000
 80016ec:	412e8480 	.word	0x412e8480
 80016f0:	404e0000 	.word	0x404e0000
 80016f4:	200000ac 	.word	0x200000ac
 80016f8:	3ff00000 	.word	0x3ff00000
 80016fc:	40768000 	.word	0x40768000

08001700 <Calculate_u_FiringTimeCylinder>:

inline uint32_t Calculate_u_FiringTimeCylinder(uint32_t in_u32_AdvanceAngleTime,  uint32_t in_u32_360degRevolutionTime)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    uint32_t l_FiringTimeCylinder = in_u32_360degRevolutionTime - in_u32_AdvanceAngleTime; 
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	60fb      	str	r3, [r7, #12]
    
    return l_FiringTimeCylinder;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <Firing_v_Cylinder1>:

void Firing_v_Cylinder1(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

    if((GlobalDataValues.TimeElapsedSinceDetection >= ((GlobalDataValues.FiringTimeCyl_1 - IGNITION_DWELL_TIME_US) )
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <Firing_v_Cylinder1+0x58>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <Firing_v_Cylinder1+0x58>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8001730:	429a      	cmp	r2, r3
 8001732:	d30d      	bcc.n	8001750 <Firing_v_Cylinder1+0x30>
    		 && (false == GlobalDataValues.isCylinder1CoilCharging ) ) )
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <Firing_v_Cylinder1+0x58>)
 8001736:	7e1b      	ldrb	r3, [r3, #24]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f083 0301 	eor.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <Firing_v_Cylinder1+0x30>
    {
        //Raise Firing Pin to HIGH 
        HW_FiringPin_v_Cylinder_1_Set();
 8001744:	f000 f866 	bl	8001814 <HW_FiringPin_v_Cylinder_1_Set>
        GlobalDataValues.isCylinder1CoilCharging = true;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <Firing_v_Cylinder1+0x58>)
 800174a:	2201      	movs	r2, #1
 800174c:	761a      	strb	r2, [r3, #24]
        GlobalDataValues.isCylinder1CoilCharging = false;
        GlobalDataValues.FiringState = en_FiringCylinder1Completed;
        g_usSinceDetection = 0;

    }
}
 800174e:	e010      	b.n	8001772 <Firing_v_Cylinder1+0x52>
    else if ( (GlobalDataValues.TimeElapsedSinceDetection >= GlobalDataValues.FiringTimeCyl_1) )
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <Firing_v_Cylinder1+0x58>)
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <Firing_v_Cylinder1+0x58>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d30a      	bcc.n	8001772 <Firing_v_Cylinder1+0x52>
        HW_FiringPin_v_Cylinder_1_Reset();
 800175c:	f000 f866 	bl	800182c <HW_FiringPin_v_Cylinder_1_Reset>
        GlobalDataValues.isCylinder1CoilCharging = false;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <Firing_v_Cylinder1+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	761a      	strb	r2, [r3, #24]
        GlobalDataValues.FiringState = en_FiringCylinder1Completed;
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <Firing_v_Cylinder1+0x58>)
 8001768:	2203      	movs	r2, #3
 800176a:	705a      	strb	r2, [r3, #1]
        g_usSinceDetection = 0;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <Firing_v_Cylinder1+0x5c>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200000c0 	.word	0x200000c0
 800177c:	200000b4 	.word	0x200000b4

08001780 <Firing_v_Cylinder2>:
  void Firing_v_Cylinder2(void)
  { 
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    static uint8_t l_FiringFlag = 0;
    
    if((GlobalDataValues.TimeElapsedSinceDetection >= (GlobalDataValues.FiringTimeCyl_2 - IGNITION_DWELL_TIME_US) ) &&  (0 == l_FiringFlag) )
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <Firing_v_Cylinder2+0x50>)
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <Firing_v_Cylinder2+0x50>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8001790:	429a      	cmp	r2, r3
 8001792:	d309      	bcc.n	80017a8 <Firing_v_Cylinder2+0x28>
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <Firing_v_Cylinder2+0x54>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <Firing_v_Cylinder2+0x28>
    {
        //Raise Firing Pin to HIGH 
        HW_FiringPin_v_Cylinder_2_Set();
 800179c:	f000 f852 	bl	8001844 <HW_FiringPin_v_Cylinder_2_Set>
        l_FiringFlag = 1;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <Firing_v_Cylinder2+0x54>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
        //Set Firing Pin to LOW 
        HW_FiringPin_v_Cylinder_2_Reset();
        l_FiringFlag = 0;
       GlobalDataValues.FiringState = en_FiringCylinder2Completed;
    }
}
 80017a6:	e011      	b.n	80017cc <Firing_v_Cylinder2+0x4c>
    else if ((GlobalDataValues.TimeElapsedSinceDetection >= GlobalDataValues.FiringTimeCyl_2) &&  (1 == l_FiringFlag) )
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <Firing_v_Cylinder2+0x50>)
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <Firing_v_Cylinder2+0x50>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d30b      	bcc.n	80017cc <Firing_v_Cylinder2+0x4c>
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <Firing_v_Cylinder2+0x54>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d107      	bne.n	80017cc <Firing_v_Cylinder2+0x4c>
        HW_FiringPin_v_Cylinder_2_Reset();
 80017bc:	f000 f84e 	bl	800185c <HW_FiringPin_v_Cylinder_2_Reset>
        l_FiringFlag = 0;
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <Firing_v_Cylinder2+0x54>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
       GlobalDataValues.FiringState = en_FiringCylinder2Completed;
 80017c6:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <Firing_v_Cylinder2+0x50>)
 80017c8:	2205      	movs	r2, #5
 80017ca:	705a      	strb	r2, [r3, #1]
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200000c0 	.word	0x200000c0
 80017d4:	200000b0 	.word	0x200000b0

080017d8 <HW_GPIO_v_Init>:

/*******************************************************************************
 * Functions
 *******************************************************************************/
void HW_GPIO_v_Init(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
PORTB &= ~(1 << PB1 );
PORTB &= ~(1 << PB0 );
#else

#endif /*ATMEL_MCU*/
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <HW_Timer_v_Init>:

void HW_Timer_v_Init(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	TCNT0 = 0;
	TIMSK |=  (1 << TOIE0);				//Enable Timer0 overflow interrupt
#else

#endif /*ATMEL_MCU*/
	g_uSCounter = 0;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HW_Timer_v_Init+0x20>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
	g_usSinceDetection = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HW_Timer_v_Init+0x24>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
	g_uSDebouncingSignalCounter = 0;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HW_Timer_v_Init+0x28>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	200000b8 	.word	0x200000b8
 800180c:	200000b4 	.word	0x200000b4
 8001810:	200000bc 	.word	0x200000bc

08001814 <HW_FiringPin_v_Cylinder_1_Set>:

void HW_FiringPin_v_Cylinder_1_Set(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
#ifdef ATMEL_MCU
	PORTB |= ( 1<< PB1);
#else
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181e:	4802      	ldr	r0, [pc, #8]	; (8001828 <HW_FiringPin_v_Cylinder_1_Set+0x14>)
 8001820:	f000 fe0e 	bl	8002440 <HAL_GPIO_WritePin>
#endif /*ATMEL_MCU*/


}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40020c00 	.word	0x40020c00

0800182c <HW_FiringPin_v_Cylinder_1_Reset>:

void HW_FiringPin_v_Cylinder_1_Reset(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
#ifdef ATMEL_MCU
    PORTB &= ~( 1<< PB1);
#else
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001836:	4802      	ldr	r0, [pc, #8]	; (8001840 <HW_FiringPin_v_Cylinder_1_Reset+0x14>)
 8001838:	f000 fe02 	bl	8002440 <HAL_GPIO_WritePin>
#endif /*ATMEL_MCU*/
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020c00 	.word	0x40020c00

08001844 <HW_FiringPin_v_Cylinder_2_Set>:

void HW_FiringPin_v_Cylinder_2_Set(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
#ifdef ATMEL_MCU
	PORTB |= ( 1<< PB0);
#else
	HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800184e:	4802      	ldr	r0, [pc, #8]	; (8001858 <HW_FiringPin_v_Cylinder_2_Set+0x14>)
 8001850:	f000 fdf6 	bl	8002440 <HAL_GPIO_WritePin>
#endif /*ATMEL_MCU*/
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020c00 	.word	0x40020c00

0800185c <HW_FiringPin_v_Cylinder_2_Reset>:

void HW_FiringPin_v_Cylinder_2_Reset(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
#ifdef ATMEL_MCU
    PORTB &= ~( 1<< PB0);
#else
	HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001866:	4802      	ldr	r0, [pc, #8]	; (8001870 <HW_FiringPin_v_Cylinder_2_Reset+0x14>)
 8001868:	f000 fdea 	bl	8002440 <HAL_GPIO_WritePin>
#endif /*ATMEL_MCU*/
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020c00 	.word	0x40020c00

08001874 <IgnitionCtrl_v_Init>:
    
}


void IgnitionCtrl_v_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	GPIO_v_Init();
 8001878:	f000 f80c 	bl	8001894 <GPIO_v_Init>
	Clock_v_Init();
 800187c:	f000 f810 	bl	80018a0 <Clock_v_Init>
	Timer_v_Init();
 8001880:	f000 f815 	bl	80018ae <Timer_v_Init>
#ifdef ATMEL_MCU
	sei();
#endif /*ATMEL_MCU*/
	GlobalDataValues.CalculationState = en_InitFinished;
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <IgnitionCtrl_v_Init+0x1c>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
	
	
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000c0 	.word	0x200000c0

08001894 <GPIO_v_Init>:


void GPIO_v_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    HW_GPIO_v_Init();
 8001898:	f7ff ff9e 	bl	80017d8 <HW_GPIO_v_Init>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <Clock_v_Init>:
void Clock_v_Init(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <Timer_v_Init>:

void Timer_v_Init(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
	HW_Timer_v_Init();
 80018b2:	f7ff ff99 	bl	80017e8 <HW_Timer_v_Init>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f000 fa86 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 f80e 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f000 f8c2 	bl	8001a50 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018cc:	f000 f874 	bl	80019b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <main+0x24>)
 80018d2:	f001 fa83 	bl	8002ddc <HAL_TIM_Base_Start_IT>
  IgnitionCtrl_v_Init();
 80018d6:	f7ff ffcd 	bl	8001874 <IgnitionCtrl_v_Init>
//	  if(g_uSCounter > 2000)
//	  {
//		  g_uSCounter = 0;
//		  HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
//	  }
	  IgnitionControl_v_Main();
 80018da:	f7ff fb07 	bl	8000eec <IgnitionControl_v_Main>
 80018de:	e7fc      	b.n	80018da <main+0x1e>
 80018e0:	200000dc 	.word	0x200000dc

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	; 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2230      	movs	r2, #48	; 0x30
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fed8 	bl	80036a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <SystemClock_Config+0xcc>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <SystemClock_Config+0xcc>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <SystemClock_Config+0xcc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <SystemClock_Config+0xd0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <SystemClock_Config+0xd0>)
 800192e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <SystemClock_Config+0xd0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001940:	2301      	movs	r3, #1
 8001942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194a:	2302      	movs	r3, #2
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001954:	2308      	movs	r3, #8
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001958:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195e:	2302      	movs	r3, #2
 8001960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001962:	2307      	movs	r3, #7
 8001964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fd82 	bl	8002474 <HAL_RCC_OscConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001976:	f000 f953 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197a:	230f      	movs	r3, #15
 800197c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197e:	2302      	movs	r3, #2
 8001980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800198a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800198c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001990:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	2105      	movs	r1, #5
 8001998:	4618      	mov	r0, r3
 800199a:	f000 ffe3 	bl	8002964 <HAL_RCC_ClockConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019a4:	f000 f93c 	bl	8001c20 <Error_Handler>
  }
}
 80019a8:	bf00      	nop
 80019aa:	3750      	adds	r7, #80	; 0x50
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000

080019b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM2_Init+0x94>)
 80019d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_TIM2_Init+0x94>)
 80019de:	2254      	movs	r2, #84	; 0x54
 80019e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_TIM2_Init+0x94>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_TIM2_Init+0x94>)
 80019ea:	22ff      	movs	r2, #255	; 0xff
 80019ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_TIM2_Init+0x94>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_TIM2_Init+0x94>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019fa:	4814      	ldr	r0, [pc, #80]	; (8001a4c <MX_TIM2_Init+0x94>)
 80019fc:	f001 f99e 	bl	8002d3c <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a06:	f000 f90b 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	4619      	mov	r1, r3
 8001a16:	480d      	ldr	r0, [pc, #52]	; (8001a4c <MX_TIM2_Init+0x94>)
 8001a18:	f001 fb58 	bl	80030cc <HAL_TIM_ConfigClockSource>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a22:	f000 f8fd 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a26:	2320      	movs	r3, #32
 8001a28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <MX_TIM2_Init+0x94>)
 8001a34:	f001 fd7e 	bl	8003534 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a3e:	f000 f8ef 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200000dc 	.word	0x200000dc

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a5f      	ldr	r2, [pc, #380]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b52      	ldr	r3, [pc, #328]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a51      	ldr	r2, [pc, #324]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a43      	ldr	r2, [pc, #268]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <MX_GPIO_Init+0x1b8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2108      	movs	r1, #8
 8001b12:	483e      	ldr	r0, [pc, #248]	; (8001c0c <MX_GPIO_Init+0x1bc>)
 8001b14:	f000 fc94 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	483c      	ldr	r0, [pc, #240]	; (8001c10 <MX_GPIO_Init+0x1c0>)
 8001b1e:	f000 fc8f 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b22:	2200      	movs	r2, #0
 8001b24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b28:	483a      	ldr	r0, [pc, #232]	; (8001c14 <MX_GPIO_Init+0x1c4>)
 8001b2a:	f000 fc89 	bl	8002440 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b2e:	2308      	movs	r3, #8
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4831      	ldr	r0, [pc, #196]	; (8001c0c <MX_GPIO_Init+0x1bc>)
 8001b46:	f000 fac7 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	482b      	ldr	r0, [pc, #172]	; (8001c10 <MX_GPIO_Init+0x1c0>)
 8001b62:	f000 fab9 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b6a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4827      	ldr	r0, [pc, #156]	; (8001c18 <MX_GPIO_Init+0x1c8>)
 8001b7c:	f000 faac 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Signal_1_Pin */
  GPIO_InitStruct.Pin = Signal_1_Pin;
 8001b80:	2310      	movs	r3, #16
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Signal_1_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4821      	ldr	r0, [pc, #132]	; (8001c18 <MX_GPIO_Init+0x1c8>)
 8001b94:	f000 faa0 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <MX_GPIO_Init+0x1cc>)
 8001bac:	f000 fa94 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001bb0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001bb4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4812      	ldr	r0, [pc, #72]	; (8001c14 <MX_GPIO_Init+0x1c4>)
 8001bca:	f000 fa85 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <MX_GPIO_Init+0x1c4>)
 8001be2:	f000 fa79 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_GPIO_Init+0x1bc>)
 8001bfc:	f000 fa6c 	bl	80020d8 <HAL_GPIO_Init>

}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	f000 f9f2 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8c:	d115      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2100      	movs	r1, #0
 8001cae:	201c      	movs	r0, #28
 8001cb0:	f000 f9db 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cb4:	201c      	movs	r0, #28
 8001cb6:	f000 f9f4 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <NMI_Handler+0x4>

08001cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d14:	f000 f8ae 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <TIM2_IRQHandler+0x2c>)
 8001d22:	f001 f8cb 	bl	8002ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  g_uSCounter++;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <TIM2_IRQHandler+0x30>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <TIM2_IRQHandler+0x30>)
 8001d2e:	6013      	str	r3, [r2, #0]
  g_usSinceDetection++;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <TIM2_IRQHandler+0x34>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <TIM2_IRQHandler+0x34>)
 8001d38:	6013      	str	r3, [r2, #0]
  g_uSDebouncingSignalCounter++;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <TIM2_IRQHandler+0x38>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <TIM2_IRQHandler+0x38>)
 8001d42:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200000dc 	.word	0x200000dc
 8001d4c:	200000b8 	.word	0x200000b8
 8001d50:	200000b4 	.word	0x200000b4
 8001d54:	200000bc 	.word	0x200000bc

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da6:	f7ff ffd7 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f001 fc59 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff fd85 	bl	80018bc <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dc0:	080045e8 	.word	0x080045e8
  ldr r2, =_sbss
 8001dc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001dc8:	20000128 	.word	0x20000128

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f92b 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff ff12 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f943 	bl	80020be <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f90b 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000124 	.word	0x20000124

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000124 	.word	0x20000124

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
         );
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	f7ff ff8e 	bl	8001f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff29 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff3e 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff8e 	bl	8001fa8 <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5d 	bl	8001f54 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff31 	bl	8001f18 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e16b      	b.n	80023cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	f040 815a 	bne.w	80023c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d005      	beq.n	800212a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	2b02      	cmp	r3, #2
 8002128:	d130      	bne.n	800218c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002160:	2201      	movs	r2, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 0201 	and.w	r2, r3, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b03      	cmp	r3, #3
 8002196:	d017      	beq.n	80021c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d123      	bne.n	800221c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	08da      	lsrs	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	69b9      	ldr	r1, [r7, #24]
 8002218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80b4 	beq.w	80023c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <HAL_GPIO_Init+0x30c>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a5f      	ldr	r2, [pc, #380]	; (80023e4 <HAL_GPIO_Init+0x30c>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_GPIO_Init+0x30c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <HAL_GPIO_Init+0x310>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_GPIO_Init+0x314>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d02b      	beq.n	80022fe <HAL_GPIO_Init+0x226>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a51      	ldr	r2, [pc, #324]	; (80023f0 <HAL_GPIO_Init+0x318>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d025      	beq.n	80022fa <HAL_GPIO_Init+0x222>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a50      	ldr	r2, [pc, #320]	; (80023f4 <HAL_GPIO_Init+0x31c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <HAL_GPIO_Init+0x21e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4f      	ldr	r2, [pc, #316]	; (80023f8 <HAL_GPIO_Init+0x320>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d019      	beq.n	80022f2 <HAL_GPIO_Init+0x21a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4e      	ldr	r2, [pc, #312]	; (80023fc <HAL_GPIO_Init+0x324>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_GPIO_Init+0x216>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4d      	ldr	r2, [pc, #308]	; (8002400 <HAL_GPIO_Init+0x328>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00d      	beq.n	80022ea <HAL_GPIO_Init+0x212>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4c      	ldr	r2, [pc, #304]	; (8002404 <HAL_GPIO_Init+0x32c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <HAL_GPIO_Init+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <HAL_GPIO_Init+0x330>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_GPIO_Init+0x20a>
 80022de:	2307      	movs	r3, #7
 80022e0:	e00e      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022e2:	2308      	movs	r3, #8
 80022e4:	e00c      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022e6:	2306      	movs	r3, #6
 80022e8:	e00a      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x228>
 80022fe:	2300      	movs	r3, #0
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_GPIO_Init+0x310>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_GPIO_Init+0x334>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_GPIO_Init+0x334>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_GPIO_Init+0x334>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <HAL_GPIO_Init+0x334>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_GPIO_Init+0x334>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002396:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_GPIO_Init+0x334>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_GPIO_Init+0x334>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_GPIO_Init+0x334>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	f67f ae90 	bls.w	80020f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40021400 	.word	0x40021400
 8002404:	40021800 	.word	0x40021800
 8002408:	40021c00 	.word	0x40021c00
 800240c:	40013c00 	.word	0x40013c00

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e267      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d075      	beq.n	800257e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d00c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b85      	ldr	r3, [pc, #532]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	4b7e      	ldr	r3, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05b      	beq.n	800257c <HAL_RCC_OscConfig+0x108>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d157      	bne.n	800257c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e242      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_OscConfig+0x74>
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6f      	ldr	r2, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6c      	ldr	r2, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 800250c:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a68      	ldr	r2, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff fcb6 	bl	8001e9c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff fcb2 	bl	8001e9c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e207      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xc0>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff fca2 	bl	8001e9c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff fc9e 	bl	8001e9c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1f3      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0xe8>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11c      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1c7      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4937      	ldr	r1, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e03a      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCC_OscConfig+0x244>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7ff fc57 	bl	8001e9c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff fc53 	bl	8001e9c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1a8      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4925      	ldr	r1, [pc, #148]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_OscConfig+0x244>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff fc36 	bl	8001e9c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002634:	f7ff fc32 	bl	8001e9c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e187      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d036      	beq.n	80026cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_RCC_OscConfig+0x248>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff fc16 	bl	8001e9c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002674:	f7ff fc12 	bl	8001e9c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e167      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x200>
 8002692:	e01b      	b.n	80026cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_OscConfig+0x248>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7ff fbff 	bl	8001e9c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	e00e      	b.n	80026c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a2:	f7ff fbfb 	bl	8001e9c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d907      	bls.n	80026c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e150      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470000 	.word	0x42470000
 80026bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ea      	bne.n	80026a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8097 	beq.w	8002808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b7d      	ldr	r3, [pc, #500]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a7c      	ldr	r2, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b7a      	ldr	r3, [pc, #488]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b77      	ldr	r3, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d118      	bne.n	8002748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b74      	ldr	r3, [pc, #464]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a73      	ldr	r2, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7ff fbbb 	bl	8001e9c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7ff fbb7 	bl	8001e9c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e10c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x2ea>
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	e01c      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x30c>
 8002766:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 8002780:	4b58      	ldr	r3, [pc, #352]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a57      	ldr	r2, [pc, #348]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a54      	ldr	r2, [pc, #336]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7ff fb7c 	bl	8001e9c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7ff fb78 	bl	8001e9c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0cb      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	4b49      	ldr	r3, [pc, #292]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ee      	beq.n	80027a8 <HAL_RCC_OscConfig+0x334>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7ff fb66 	bl	8001e9c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7ff fb62 	bl	8001e9c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0b5      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a1 	beq.w	8002954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002812:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b08      	cmp	r3, #8
 800281c:	d05c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d141      	bne.n	80028aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fb36 	bl	8001e9c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff fb32 	bl	8001e9c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e087      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	491b      	ldr	r1, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7ff fb0b 	bl	8001e9c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288a:	f7ff fb07 	bl	8001e9c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e05c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x416>
 80028a8:	e054      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff faf4 	bl	8001e9c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7ff faf0 	bl	8001e9c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e045      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
 80028d6:	e03d      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e038      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000
 80028ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4ec>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d121      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d11a      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	4293      	cmp	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	3b01      	subs	r3, #1
 800293a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0cc      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90c      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e067      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7ff fa22 	bl	8001e9c <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7ff fa1e 	bl	8001e9c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	490a      	ldr	r1, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f982 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08004598 	.word	0x08004598
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000004 	.word	0x20000004

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b094      	sub	sp, #80	; 0x50
 8002b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	2300      	movs	r3, #0
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d00d      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x40>
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	f200 80e1 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b62:	e0db      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b68:	e0db      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6e:	e0d8      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d063      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb4:	0150      	lsls	r0, r2, #5
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4621      	mov	r1, r4
 8002bbc:	1a51      	subs	r1, r2, r1
 8002bbe:	6139      	str	r1, [r7, #16]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	018b      	lsls	r3, r1, #6
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bde:	4651      	mov	r1, sl
 8002be0:	018a      	lsls	r2, r1, #6
 8002be2:	4651      	mov	r1, sl
 8002be4:	ebb2 0801 	subs.w	r8, r2, r1
 8002be8:	4659      	mov	r1, fp
 8002bea:	eb63 0901 	sbc.w	r9, r3, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	eb18 0303 	adds.w	r3, r8, r3
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	462b      	mov	r3, r5
 8002c10:	eb49 0303 	adc.w	r3, r9, r3
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c22:	4629      	mov	r1, r5
 8002c24:	024b      	lsls	r3, r1, #9
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	024a      	lsls	r2, r1, #9
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c36:	2200      	movs	r2, #0
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c40:	f7fd ffc6 	bl	8000bd0 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	4611      	mov	r1, r2
 8002c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0159      	lsls	r1, r3, #5
 8002c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7a:	0150      	lsls	r0, r2, #5
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4641      	mov	r1, r8
 8002c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	00eb      	lsls	r3, r5, #3
 8002cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	18e3      	adds	r3, r4, r3
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb45 0303 	adc.w	r3, r5, r3
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	61fa      	str	r2, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	f7fd ff6c 	bl	8000bd0 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe ff8a 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 faa0 	bl	80032c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d001      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04e      	b.n	8002e92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d022      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x80>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1e:	d01d      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x80>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d018      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x80>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d013      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x80>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_TIM_Base_Start_IT+0xd0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00e      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x80>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x80>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d004      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x80>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d111      	bne.n	8002e80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d010      	beq.n	8002e90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7e:	e007      	b.n	8002e90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40010400 	.word	0x40010400
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40001800 	.word	0x40001800

08002ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0202 	mvn.w	r2, #2
 8002ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f9bf 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f9b1 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f9c2 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0204 	mvn.w	r2, #4
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f995 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f987 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f998 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0208 	mvn.w	r2, #8
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f96b 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f95d 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f96e 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0210 	mvn.w	r2, #16
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f941 	bl	8003282 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f933 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f944 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0201 	mvn.w	r2, #1
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f90d 	bl	800325a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 faea 	bl	8003640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d10e      	bne.n	8003098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d107      	bne.n	8003098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f909 	bl	80032aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d10e      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0220 	mvn.w	r2, #32
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fab4 	bl	800362c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_ConfigClockSource+0x1c>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0b4      	b.n	8003252 <HAL_TIM_ConfigClockSource+0x186>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003120:	d03e      	beq.n	80031a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	f200 8087 	bhi.w	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 800312a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312e:	f000 8086 	beq.w	800323e <HAL_TIM_ConfigClockSource+0x172>
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	d87f      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b70      	cmp	r3, #112	; 0x70
 800313a:	d01a      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0xa6>
 800313c:	2b70      	cmp	r3, #112	; 0x70
 800313e:	d87b      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b60      	cmp	r3, #96	; 0x60
 8003142:	d050      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003144:	2b60      	cmp	r3, #96	; 0x60
 8003146:	d877      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b50      	cmp	r3, #80	; 0x50
 800314a:	d03c      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0xfa>
 800314c:	2b50      	cmp	r3, #80	; 0x50
 800314e:	d873      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d058      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x13a>
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d86f      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b30      	cmp	r3, #48	; 0x30
 800315a:	d064      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x15a>
 800315c:	2b30      	cmp	r3, #48	; 0x30
 800315e:	d86b      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b20      	cmp	r3, #32
 8003162:	d060      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x15a>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d867      	bhi.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05c      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x15a>
 800316c:	2b10      	cmp	r3, #16
 800316e:	d05a      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0x15a>
 8003170:	e062      	b.n	8003238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f000 f9b7 	bl	80034f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	609a      	str	r2, [r3, #8]
      break;
 800319e:	e04f      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f000 f9a0 	bl	80034f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c2:	609a      	str	r2, [r3, #8]
      break;
 80031c4:	e03c      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 f914 	bl	8003400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2150      	movs	r1, #80	; 0x50
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f96d 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 80031e4:	e02c      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f000 f933 	bl	800345e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2160      	movs	r1, #96	; 0x60
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f95d 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 8003204:	e01c      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	461a      	mov	r2, r3
 8003214:	f000 f8f4 	bl	8003400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f94d 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 8003224:	e00c      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f000 f944 	bl	80034be <TIM_ITRx_SetConfig>
      break;
 8003236:	e003      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      break;
 800323c:	e000      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800323e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d013      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3d      	ldr	r2, [pc, #244]	; (80033d8 <TIM_Base_SetConfig+0x118>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <TIM_Base_SetConfig+0x11c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <TIM_Base_SetConfig+0x120>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d027      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <TIM_Base_SetConfig+0x118>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d023      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <TIM_Base_SetConfig+0x11c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <TIM_Base_SetConfig+0x120>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d017      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a28      	ldr	r2, [pc, #160]	; (80033e8 <TIM_Base_SetConfig+0x128>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <TIM_Base_SetConfig+0x12c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <TIM_Base_SetConfig+0x130>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0x134>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <TIM_Base_SetConfig+0x138>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <TIM_Base_SetConfig+0x13c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <TIM_Base_SetConfig+0x114>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0xf8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <TIM_Base_SetConfig+0x124>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d103      	bne.n	80033c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	615a      	str	r2, [r3, #20]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40010400 	.word	0x40010400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	40001800 	.word	0x40001800
 80033f8:	40001c00 	.word	0x40001c00
 80033fc:	40002000 	.word	0x40002000

08003400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0201 	bic.w	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800342a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f023 030a 	bic.w	r3, r3, #10
 800343c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345e:	b480      	push	{r7}
 8003460:	b087      	sub	sp, #28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0210 	bic.w	r2, r3, #16
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	031b      	lsls	r3, r3, #12
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800349a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	f043 0307 	orr.w	r3, r3, #7
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800350e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	021a      	lsls	r2, r3, #8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	431a      	orrs	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003548:	2302      	movs	r3, #2
 800354a:	e05a      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d01d      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40014000 	.word	0x40014000
 8003628:	40001800 	.word	0x40001800

0800362c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <__errno>:
 8003654:	4b01      	ldr	r3, [pc, #4]	; (800365c <__errno+0x8>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	2000000c 	.word	0x2000000c

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	4d0d      	ldr	r5, [pc, #52]	; (8003698 <__libc_init_array+0x38>)
 8003664:	4c0d      	ldr	r4, [pc, #52]	; (800369c <__libc_init_array+0x3c>)
 8003666:	1b64      	subs	r4, r4, r5
 8003668:	10a4      	asrs	r4, r4, #2
 800366a:	2600      	movs	r6, #0
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	4d0b      	ldr	r5, [pc, #44]	; (80036a0 <__libc_init_array+0x40>)
 8003672:	4c0c      	ldr	r4, [pc, #48]	; (80036a4 <__libc_init_array+0x44>)
 8003674:	f000 ff82 	bl	800457c <_init>
 8003678:	1b64      	subs	r4, r4, r5
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	2600      	movs	r6, #0
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f855 3b04 	ldr.w	r3, [r5], #4
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	080045e0 	.word	0x080045e0
 800369c:	080045e0 	.word	0x080045e0
 80036a0:	080045e0 	.word	0x080045e0
 80036a4:	080045e4 	.word	0x080045e4

080036a8 <memset>:
 80036a8:	4402      	add	r2, r0
 80036aa:	4603      	mov	r3, r0
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d100      	bne.n	80036b2 <memset+0xa>
 80036b0:	4770      	bx	lr
 80036b2:	f803 1b01 	strb.w	r1, [r3], #1
 80036b6:	e7f9      	b.n	80036ac <memset+0x4>

080036b8 <round>:
 80036b8:	ec51 0b10 	vmov	r0, r1, d0
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80036c2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80036c6:	2c13      	cmp	r4, #19
 80036c8:	ee10 2a10 	vmov	r2, s0
 80036cc:	460b      	mov	r3, r1
 80036ce:	dc19      	bgt.n	8003704 <round+0x4c>
 80036d0:	2c00      	cmp	r4, #0
 80036d2:	da09      	bge.n	80036e8 <round+0x30>
 80036d4:	3401      	adds	r4, #1
 80036d6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80036da:	d103      	bne.n	80036e4 <round+0x2c>
 80036dc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80036e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80036e4:	2200      	movs	r2, #0
 80036e6:	e028      	b.n	800373a <round+0x82>
 80036e8:	4d15      	ldr	r5, [pc, #84]	; (8003740 <round+0x88>)
 80036ea:	4125      	asrs	r5, r4
 80036ec:	ea01 0605 	and.w	r6, r1, r5
 80036f0:	4332      	orrs	r2, r6
 80036f2:	d00e      	beq.n	8003712 <round+0x5a>
 80036f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036f8:	fa42 f404 	asr.w	r4, r2, r4
 80036fc:	4423      	add	r3, r4
 80036fe:	ea23 0305 	bic.w	r3, r3, r5
 8003702:	e7ef      	b.n	80036e4 <round+0x2c>
 8003704:	2c33      	cmp	r4, #51	; 0x33
 8003706:	dd07      	ble.n	8003718 <round+0x60>
 8003708:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800370c:	d101      	bne.n	8003712 <round+0x5a>
 800370e:	f7fc fd61 	bl	80001d4 <__adddf3>
 8003712:	ec41 0b10 	vmov	d0, r0, r1
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800371c:	f04f 35ff 	mov.w	r5, #4294967295
 8003720:	40f5      	lsrs	r5, r6
 8003722:	4228      	tst	r0, r5
 8003724:	d0f5      	beq.n	8003712 <round+0x5a>
 8003726:	2101      	movs	r1, #1
 8003728:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800372c:	fa01 f404 	lsl.w	r4, r1, r4
 8003730:	1912      	adds	r2, r2, r4
 8003732:	bf28      	it	cs
 8003734:	185b      	addcs	r3, r3, r1
 8003736:	ea22 0205 	bic.w	r2, r2, r5
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	e7e8      	b.n	8003712 <round+0x5a>
 8003740:	000fffff 	.word	0x000fffff

08003744 <pow>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	ed2d 8b02 	vpush	{d8}
 800374a:	eeb0 8a40 	vmov.f32	s16, s0
 800374e:	eef0 8a60 	vmov.f32	s17, s1
 8003752:	ec55 4b11 	vmov	r4, r5, d1
 8003756:	f000 f867 	bl	8003828 <__ieee754_pow>
 800375a:	4622      	mov	r2, r4
 800375c:	462b      	mov	r3, r5
 800375e:	4620      	mov	r0, r4
 8003760:	4629      	mov	r1, r5
 8003762:	ec57 6b10 	vmov	r6, r7, d0
 8003766:	f7fd f985 	bl	8000a74 <__aeabi_dcmpun>
 800376a:	2800      	cmp	r0, #0
 800376c:	d13b      	bne.n	80037e6 <pow+0xa2>
 800376e:	ec51 0b18 	vmov	r0, r1, d8
 8003772:	2200      	movs	r2, #0
 8003774:	2300      	movs	r3, #0
 8003776:	f7fd f94b 	bl	8000a10 <__aeabi_dcmpeq>
 800377a:	b1b8      	cbz	r0, 80037ac <pow+0x68>
 800377c:	2200      	movs	r2, #0
 800377e:	2300      	movs	r3, #0
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fd f944 	bl	8000a10 <__aeabi_dcmpeq>
 8003788:	2800      	cmp	r0, #0
 800378a:	d146      	bne.n	800381a <pow+0xd6>
 800378c:	ec45 4b10 	vmov	d0, r4, r5
 8003790:	f000 fe63 	bl	800445a <finite>
 8003794:	b338      	cbz	r0, 80037e6 <pow+0xa2>
 8003796:	2200      	movs	r2, #0
 8003798:	2300      	movs	r3, #0
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fd f941 	bl	8000a24 <__aeabi_dcmplt>
 80037a2:	b300      	cbz	r0, 80037e6 <pow+0xa2>
 80037a4:	f7ff ff56 	bl	8003654 <__errno>
 80037a8:	2322      	movs	r3, #34	; 0x22
 80037aa:	e01b      	b.n	80037e4 <pow+0xa0>
 80037ac:	ec47 6b10 	vmov	d0, r6, r7
 80037b0:	f000 fe53 	bl	800445a <finite>
 80037b4:	b9e0      	cbnz	r0, 80037f0 <pow+0xac>
 80037b6:	eeb0 0a48 	vmov.f32	s0, s16
 80037ba:	eef0 0a68 	vmov.f32	s1, s17
 80037be:	f000 fe4c 	bl	800445a <finite>
 80037c2:	b1a8      	cbz	r0, 80037f0 <pow+0xac>
 80037c4:	ec45 4b10 	vmov	d0, r4, r5
 80037c8:	f000 fe47 	bl	800445a <finite>
 80037cc:	b180      	cbz	r0, 80037f0 <pow+0xac>
 80037ce:	4632      	mov	r2, r6
 80037d0:	463b      	mov	r3, r7
 80037d2:	4630      	mov	r0, r6
 80037d4:	4639      	mov	r1, r7
 80037d6:	f7fd f94d 	bl	8000a74 <__aeabi_dcmpun>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d0e2      	beq.n	80037a4 <pow+0x60>
 80037de:	f7ff ff39 	bl	8003654 <__errno>
 80037e2:	2321      	movs	r3, #33	; 0x21
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	ecbd 8b02 	vpop	{d8}
 80037ea:	ec47 6b10 	vmov	d0, r6, r7
 80037ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f0:	2200      	movs	r2, #0
 80037f2:	2300      	movs	r3, #0
 80037f4:	4630      	mov	r0, r6
 80037f6:	4639      	mov	r1, r7
 80037f8:	f7fd f90a 	bl	8000a10 <__aeabi_dcmpeq>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d0f2      	beq.n	80037e6 <pow+0xa2>
 8003800:	eeb0 0a48 	vmov.f32	s0, s16
 8003804:	eef0 0a68 	vmov.f32	s1, s17
 8003808:	f000 fe27 	bl	800445a <finite>
 800380c:	2800      	cmp	r0, #0
 800380e:	d0ea      	beq.n	80037e6 <pow+0xa2>
 8003810:	ec45 4b10 	vmov	d0, r4, r5
 8003814:	f000 fe21 	bl	800445a <finite>
 8003818:	e7c3      	b.n	80037a2 <pow+0x5e>
 800381a:	4f01      	ldr	r7, [pc, #4]	; (8003820 <pow+0xdc>)
 800381c:	2600      	movs	r6, #0
 800381e:	e7e2      	b.n	80037e6 <pow+0xa2>
 8003820:	3ff00000 	.word	0x3ff00000
 8003824:	00000000 	.word	0x00000000

08003828 <__ieee754_pow>:
 8003828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382c:	ed2d 8b06 	vpush	{d8-d10}
 8003830:	b089      	sub	sp, #36	; 0x24
 8003832:	ed8d 1b00 	vstr	d1, [sp]
 8003836:	e9dd 2900 	ldrd	r2, r9, [sp]
 800383a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800383e:	ea58 0102 	orrs.w	r1, r8, r2
 8003842:	ec57 6b10 	vmov	r6, r7, d0
 8003846:	d115      	bne.n	8003874 <__ieee754_pow+0x4c>
 8003848:	19b3      	adds	r3, r6, r6
 800384a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800384e:	4152      	adcs	r2, r2
 8003850:	4299      	cmp	r1, r3
 8003852:	4b89      	ldr	r3, [pc, #548]	; (8003a78 <__ieee754_pow+0x250>)
 8003854:	4193      	sbcs	r3, r2
 8003856:	f080 84d2 	bcs.w	80041fe <__ieee754_pow+0x9d6>
 800385a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800385e:	4630      	mov	r0, r6
 8003860:	4639      	mov	r1, r7
 8003862:	f7fc fcb7 	bl	80001d4 <__adddf3>
 8003866:	ec41 0b10 	vmov	d0, r0, r1
 800386a:	b009      	add	sp, #36	; 0x24
 800386c:	ecbd 8b06 	vpop	{d8-d10}
 8003870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003874:	4b81      	ldr	r3, [pc, #516]	; (8003a7c <__ieee754_pow+0x254>)
 8003876:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800387a:	429c      	cmp	r4, r3
 800387c:	ee10 aa10 	vmov	sl, s0
 8003880:	463d      	mov	r5, r7
 8003882:	dc06      	bgt.n	8003892 <__ieee754_pow+0x6a>
 8003884:	d101      	bne.n	800388a <__ieee754_pow+0x62>
 8003886:	2e00      	cmp	r6, #0
 8003888:	d1e7      	bne.n	800385a <__ieee754_pow+0x32>
 800388a:	4598      	cmp	r8, r3
 800388c:	dc01      	bgt.n	8003892 <__ieee754_pow+0x6a>
 800388e:	d10f      	bne.n	80038b0 <__ieee754_pow+0x88>
 8003890:	b172      	cbz	r2, 80038b0 <__ieee754_pow+0x88>
 8003892:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003896:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800389a:	ea55 050a 	orrs.w	r5, r5, sl
 800389e:	d1dc      	bne.n	800385a <__ieee754_pow+0x32>
 80038a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80038a4:	18db      	adds	r3, r3, r3
 80038a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80038aa:	4152      	adcs	r2, r2
 80038ac:	429d      	cmp	r5, r3
 80038ae:	e7d0      	b.n	8003852 <__ieee754_pow+0x2a>
 80038b0:	2d00      	cmp	r5, #0
 80038b2:	da3b      	bge.n	800392c <__ieee754_pow+0x104>
 80038b4:	4b72      	ldr	r3, [pc, #456]	; (8003a80 <__ieee754_pow+0x258>)
 80038b6:	4598      	cmp	r8, r3
 80038b8:	dc51      	bgt.n	800395e <__ieee754_pow+0x136>
 80038ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80038be:	4598      	cmp	r8, r3
 80038c0:	f340 84ac 	ble.w	800421c <__ieee754_pow+0x9f4>
 80038c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80038c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80038cc:	2b14      	cmp	r3, #20
 80038ce:	dd0f      	ble.n	80038f0 <__ieee754_pow+0xc8>
 80038d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80038d4:	fa22 f103 	lsr.w	r1, r2, r3
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	4293      	cmp	r3, r2
 80038de:	f040 849d 	bne.w	800421c <__ieee754_pow+0x9f4>
 80038e2:	f001 0101 	and.w	r1, r1, #1
 80038e6:	f1c1 0302 	rsb	r3, r1, #2
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	b182      	cbz	r2, 8003910 <__ieee754_pow+0xe8>
 80038ee:	e05f      	b.n	80039b0 <__ieee754_pow+0x188>
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	d15b      	bne.n	80039ac <__ieee754_pow+0x184>
 80038f4:	f1c3 0314 	rsb	r3, r3, #20
 80038f8:	fa48 f103 	asr.w	r1, r8, r3
 80038fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003900:	4543      	cmp	r3, r8
 8003902:	f040 8488 	bne.w	8004216 <__ieee754_pow+0x9ee>
 8003906:	f001 0101 	and.w	r1, r1, #1
 800390a:	f1c1 0302 	rsb	r3, r1, #2
 800390e:	9304      	str	r3, [sp, #16]
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <__ieee754_pow+0x25c>)
 8003912:	4598      	cmp	r8, r3
 8003914:	d132      	bne.n	800397c <__ieee754_pow+0x154>
 8003916:	f1b9 0f00 	cmp.w	r9, #0
 800391a:	f280 8478 	bge.w	800420e <__ieee754_pow+0x9e6>
 800391e:	4959      	ldr	r1, [pc, #356]	; (8003a84 <__ieee754_pow+0x25c>)
 8003920:	4632      	mov	r2, r6
 8003922:	463b      	mov	r3, r7
 8003924:	2000      	movs	r0, #0
 8003926:	f7fc ff35 	bl	8000794 <__aeabi_ddiv>
 800392a:	e79c      	b.n	8003866 <__ieee754_pow+0x3e>
 800392c:	2300      	movs	r3, #0
 800392e:	9304      	str	r3, [sp, #16]
 8003930:	2a00      	cmp	r2, #0
 8003932:	d13d      	bne.n	80039b0 <__ieee754_pow+0x188>
 8003934:	4b51      	ldr	r3, [pc, #324]	; (8003a7c <__ieee754_pow+0x254>)
 8003936:	4598      	cmp	r8, r3
 8003938:	d1ea      	bne.n	8003910 <__ieee754_pow+0xe8>
 800393a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800393e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003942:	ea53 030a 	orrs.w	r3, r3, sl
 8003946:	f000 845a 	beq.w	80041fe <__ieee754_pow+0x9d6>
 800394a:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <__ieee754_pow+0x260>)
 800394c:	429c      	cmp	r4, r3
 800394e:	dd08      	ble.n	8003962 <__ieee754_pow+0x13a>
 8003950:	f1b9 0f00 	cmp.w	r9, #0
 8003954:	f2c0 8457 	blt.w	8004206 <__ieee754_pow+0x9de>
 8003958:	e9dd 0100 	ldrd	r0, r1, [sp]
 800395c:	e783      	b.n	8003866 <__ieee754_pow+0x3e>
 800395e:	2302      	movs	r3, #2
 8003960:	e7e5      	b.n	800392e <__ieee754_pow+0x106>
 8003962:	f1b9 0f00 	cmp.w	r9, #0
 8003966:	f04f 0000 	mov.w	r0, #0
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	f6bf af7a 	bge.w	8003866 <__ieee754_pow+0x3e>
 8003972:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003976:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800397a:	e774      	b.n	8003866 <__ieee754_pow+0x3e>
 800397c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003980:	d106      	bne.n	8003990 <__ieee754_pow+0x168>
 8003982:	4632      	mov	r2, r6
 8003984:	463b      	mov	r3, r7
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	f7fc fdd9 	bl	8000540 <__aeabi_dmul>
 800398e:	e76a      	b.n	8003866 <__ieee754_pow+0x3e>
 8003990:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <__ieee754_pow+0x264>)
 8003992:	4599      	cmp	r9, r3
 8003994:	d10c      	bne.n	80039b0 <__ieee754_pow+0x188>
 8003996:	2d00      	cmp	r5, #0
 8003998:	db0a      	blt.n	80039b0 <__ieee754_pow+0x188>
 800399a:	ec47 6b10 	vmov	d0, r6, r7
 800399e:	b009      	add	sp, #36	; 0x24
 80039a0:	ecbd 8b06 	vpop	{d8-d10}
 80039a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	f000 bc6c 	b.w	8004284 <__ieee754_sqrt>
 80039ac:	2300      	movs	r3, #0
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	ec47 6b10 	vmov	d0, r6, r7
 80039b4:	f000 fd48 	bl	8004448 <fabs>
 80039b8:	ec51 0b10 	vmov	r0, r1, d0
 80039bc:	f1ba 0f00 	cmp.w	sl, #0
 80039c0:	d129      	bne.n	8003a16 <__ieee754_pow+0x1ee>
 80039c2:	b124      	cbz	r4, 80039ce <__ieee754_pow+0x1a6>
 80039c4:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <__ieee754_pow+0x25c>)
 80039c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d123      	bne.n	8003a16 <__ieee754_pow+0x1ee>
 80039ce:	f1b9 0f00 	cmp.w	r9, #0
 80039d2:	da05      	bge.n	80039e0 <__ieee754_pow+0x1b8>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	2000      	movs	r0, #0
 80039da:	492a      	ldr	r1, [pc, #168]	; (8003a84 <__ieee754_pow+0x25c>)
 80039dc:	f7fc feda 	bl	8000794 <__aeabi_ddiv>
 80039e0:	2d00      	cmp	r5, #0
 80039e2:	f6bf af40 	bge.w	8003866 <__ieee754_pow+0x3e>
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80039ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80039f0:	4323      	orrs	r3, r4
 80039f2:	d108      	bne.n	8003a06 <__ieee754_pow+0x1de>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f7fc fbe8 	bl	80001d0 <__aeabi_dsub>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	e78f      	b.n	8003926 <__ieee754_pow+0xfe>
 8003a06:	9b04      	ldr	r3, [sp, #16]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f47f af2c 	bne.w	8003866 <__ieee754_pow+0x3e>
 8003a0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a12:	4619      	mov	r1, r3
 8003a14:	e727      	b.n	8003866 <__ieee754_pow+0x3e>
 8003a16:	0feb      	lsrs	r3, r5, #31
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	9306      	str	r3, [sp, #24]
 8003a1c:	9a06      	ldr	r2, [sp, #24]
 8003a1e:	9b04      	ldr	r3, [sp, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d102      	bne.n	8003a2a <__ieee754_pow+0x202>
 8003a24:	4632      	mov	r2, r6
 8003a26:	463b      	mov	r3, r7
 8003a28:	e7e6      	b.n	80039f8 <__ieee754_pow+0x1d0>
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <__ieee754_pow+0x268>)
 8003a2c:	4598      	cmp	r8, r3
 8003a2e:	f340 80fb 	ble.w	8003c28 <__ieee754_pow+0x400>
 8003a32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003a36:	4598      	cmp	r8, r3
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <__ieee754_pow+0x260>)
 8003a3a:	dd0c      	ble.n	8003a56 <__ieee754_pow+0x22e>
 8003a3c:	429c      	cmp	r4, r3
 8003a3e:	dc0f      	bgt.n	8003a60 <__ieee754_pow+0x238>
 8003a40:	f1b9 0f00 	cmp.w	r9, #0
 8003a44:	da0f      	bge.n	8003a66 <__ieee754_pow+0x23e>
 8003a46:	2000      	movs	r0, #0
 8003a48:	b009      	add	sp, #36	; 0x24
 8003a4a:	ecbd 8b06 	vpop	{d8-d10}
 8003a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a52:	f000 bcf0 	b.w	8004436 <__math_oflow>
 8003a56:	429c      	cmp	r4, r3
 8003a58:	dbf2      	blt.n	8003a40 <__ieee754_pow+0x218>
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <__ieee754_pow+0x25c>)
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	dd19      	ble.n	8003a94 <__ieee754_pow+0x26c>
 8003a60:	f1b9 0f00 	cmp.w	r9, #0
 8003a64:	dcef      	bgt.n	8003a46 <__ieee754_pow+0x21e>
 8003a66:	2000      	movs	r0, #0
 8003a68:	b009      	add	sp, #36	; 0x24
 8003a6a:	ecbd 8b06 	vpop	{d8-d10}
 8003a6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a72:	f000 bcd7 	b.w	8004424 <__math_uflow>
 8003a76:	bf00      	nop
 8003a78:	fff00000 	.word	0xfff00000
 8003a7c:	7ff00000 	.word	0x7ff00000
 8003a80:	433fffff 	.word	0x433fffff
 8003a84:	3ff00000 	.word	0x3ff00000
 8003a88:	3fefffff 	.word	0x3fefffff
 8003a8c:	3fe00000 	.word	0x3fe00000
 8003a90:	41e00000 	.word	0x41e00000
 8003a94:	4b60      	ldr	r3, [pc, #384]	; (8003c18 <__ieee754_pow+0x3f0>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	f7fc fb9a 	bl	80001d0 <__aeabi_dsub>
 8003a9c:	a354      	add	r3, pc, #336	; (adr r3, 8003bf0 <__ieee754_pow+0x3c8>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	f7fc fd4b 	bl	8000540 <__aeabi_dmul>
 8003aaa:	a353      	add	r3, pc, #332	; (adr r3, 8003bf8 <__ieee754_pow+0x3d0>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	460f      	mov	r7, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fd42 	bl	8000540 <__aeabi_dmul>
 8003abc:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <__ieee754_pow+0x3f4>)
 8003abe:	4682      	mov	sl, r0
 8003ac0:	468b      	mov	fp, r1
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f7fc fd3a 	bl	8000540 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	a14b      	add	r1, pc, #300	; (adr r1, 8003c00 <__ieee754_pow+0x3d8>)
 8003ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ad6:	f7fc fb7b 	bl	80001d0 <__aeabi_dsub>
 8003ada:	4622      	mov	r2, r4
 8003adc:	462b      	mov	r3, r5
 8003ade:	f7fc fd2f 	bl	8000540 <__aeabi_dmul>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	494d      	ldr	r1, [pc, #308]	; (8003c20 <__ieee754_pow+0x3f8>)
 8003aea:	f7fc fb71 	bl	80001d0 <__aeabi_dsub>
 8003aee:	4622      	mov	r2, r4
 8003af0:	4680      	mov	r8, r0
 8003af2:	4689      	mov	r9, r1
 8003af4:	462b      	mov	r3, r5
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	f7fc fd21 	bl	8000540 <__aeabi_dmul>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4640      	mov	r0, r8
 8003b04:	4649      	mov	r1, r9
 8003b06:	f7fc fd1b 	bl	8000540 <__aeabi_dmul>
 8003b0a:	a33f      	add	r3, pc, #252	; (adr r3, 8003c08 <__ieee754_pow+0x3e0>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f7fc fd16 	bl	8000540 <__aeabi_dmul>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4650      	mov	r0, sl
 8003b1a:	4659      	mov	r1, fp
 8003b1c:	f7fc fb58 	bl	80001d0 <__aeabi_dsub>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4680      	mov	r8, r0
 8003b26:	4689      	mov	r9, r1
 8003b28:	4630      	mov	r0, r6
 8003b2a:	4639      	mov	r1, r7
 8003b2c:	f7fc fb52 	bl	80001d4 <__adddf3>
 8003b30:	2000      	movs	r0, #0
 8003b32:	4632      	mov	r2, r6
 8003b34:	463b      	mov	r3, r7
 8003b36:	4604      	mov	r4, r0
 8003b38:	460d      	mov	r5, r1
 8003b3a:	f7fc fb49 	bl	80001d0 <__aeabi_dsub>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4640      	mov	r0, r8
 8003b44:	4649      	mov	r1, r9
 8003b46:	f7fc fb43 	bl	80001d0 <__aeabi_dsub>
 8003b4a:	9b04      	ldr	r3, [sp, #16]
 8003b4c:	9a06      	ldr	r2, [sp, #24]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	4682      	mov	sl, r0
 8003b54:	468b      	mov	fp, r1
 8003b56:	f040 81e7 	bne.w	8003f28 <__ieee754_pow+0x700>
 8003b5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8003c10 <__ieee754_pow+0x3e8>
 8003b5e:	eeb0 8a47 	vmov.f32	s16, s14
 8003b62:	eef0 8a67 	vmov.f32	s17, s15
 8003b66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	463b      	mov	r3, r7
 8003b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b74:	f7fc fb2c 	bl	80001d0 <__aeabi_dsub>
 8003b78:	4622      	mov	r2, r4
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	f7fc fce0 	bl	8000540 <__aeabi_dmul>
 8003b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b84:	4680      	mov	r8, r0
 8003b86:	4689      	mov	r9, r1
 8003b88:	4650      	mov	r0, sl
 8003b8a:	4659      	mov	r1, fp
 8003b8c:	f7fc fcd8 	bl	8000540 <__aeabi_dmul>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4640      	mov	r0, r8
 8003b96:	4649      	mov	r1, r9
 8003b98:	f7fc fb1c 	bl	80001d4 <__adddf3>
 8003b9c:	4632      	mov	r2, r6
 8003b9e:	463b      	mov	r3, r7
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	4689      	mov	r9, r1
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f7fc fcca 	bl	8000540 <__aeabi_dmul>
 8003bac:	460b      	mov	r3, r1
 8003bae:	4604      	mov	r4, r0
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	f7fc fb0c 	bl	80001d4 <__adddf3>
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <__ieee754_pow+0x3fc>)
 8003bbe:	4299      	cmp	r1, r3
 8003bc0:	ec45 4b19 	vmov	d9, r4, r5
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	460f      	mov	r7, r1
 8003bc8:	468b      	mov	fp, r1
 8003bca:	f340 82f1 	ble.w	80041b0 <__ieee754_pow+0x988>
 8003bce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003bd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003bd6:	4303      	orrs	r3, r0
 8003bd8:	f000 81e4 	beq.w	8003fa4 <__ieee754_pow+0x77c>
 8003bdc:	ec51 0b18 	vmov	r0, r1, d8
 8003be0:	2200      	movs	r2, #0
 8003be2:	2300      	movs	r3, #0
 8003be4:	f7fc ff1e 	bl	8000a24 <__aeabi_dcmplt>
 8003be8:	3800      	subs	r0, #0
 8003bea:	bf18      	it	ne
 8003bec:	2001      	movne	r0, #1
 8003bee:	e72b      	b.n	8003a48 <__ieee754_pow+0x220>
 8003bf0:	60000000 	.word	0x60000000
 8003bf4:	3ff71547 	.word	0x3ff71547
 8003bf8:	f85ddf44 	.word	0xf85ddf44
 8003bfc:	3e54ae0b 	.word	0x3e54ae0b
 8003c00:	55555555 	.word	0x55555555
 8003c04:	3fd55555 	.word	0x3fd55555
 8003c08:	652b82fe 	.word	0x652b82fe
 8003c0c:	3ff71547 	.word	0x3ff71547
 8003c10:	00000000 	.word	0x00000000
 8003c14:	bff00000 	.word	0xbff00000
 8003c18:	3ff00000 	.word	0x3ff00000
 8003c1c:	3fd00000 	.word	0x3fd00000
 8003c20:	3fe00000 	.word	0x3fe00000
 8003c24:	408fffff 	.word	0x408fffff
 8003c28:	4bd5      	ldr	r3, [pc, #852]	; (8003f80 <__ieee754_pow+0x758>)
 8003c2a:	402b      	ands	r3, r5
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	b92b      	cbnz	r3, 8003c3c <__ieee754_pow+0x414>
 8003c30:	4bd4      	ldr	r3, [pc, #848]	; (8003f84 <__ieee754_pow+0x75c>)
 8003c32:	f7fc fc85 	bl	8000540 <__aeabi_dmul>
 8003c36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	1523      	asrs	r3, r4, #20
 8003c3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003c42:	4413      	add	r3, r2
 8003c44:	9305      	str	r3, [sp, #20]
 8003c46:	4bd0      	ldr	r3, [pc, #832]	; (8003f88 <__ieee754_pow+0x760>)
 8003c48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003c4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003c50:	429c      	cmp	r4, r3
 8003c52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003c56:	dd08      	ble.n	8003c6a <__ieee754_pow+0x442>
 8003c58:	4bcc      	ldr	r3, [pc, #816]	; (8003f8c <__ieee754_pow+0x764>)
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	f340 8162 	ble.w	8003f24 <__ieee754_pow+0x6fc>
 8003c60:	9b05      	ldr	r3, [sp, #20]
 8003c62:	3301      	adds	r3, #1
 8003c64:	9305      	str	r3, [sp, #20]
 8003c66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003c6a:	2400      	movs	r4, #0
 8003c6c:	00e3      	lsls	r3, r4, #3
 8003c6e:	9307      	str	r3, [sp, #28]
 8003c70:	4bc7      	ldr	r3, [pc, #796]	; (8003f90 <__ieee754_pow+0x768>)
 8003c72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003c76:	ed93 7b00 	vldr	d7, [r3]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	ec53 2b17 	vmov	r2, r3, d7
 8003c80:	eeb0 9a47 	vmov.f32	s18, s14
 8003c84:	eef0 9a67 	vmov.f32	s19, s15
 8003c88:	4682      	mov	sl, r0
 8003c8a:	f7fc faa1 	bl	80001d0 <__aeabi_dsub>
 8003c8e:	4652      	mov	r2, sl
 8003c90:	4606      	mov	r6, r0
 8003c92:	460f      	mov	r7, r1
 8003c94:	462b      	mov	r3, r5
 8003c96:	ec51 0b19 	vmov	r0, r1, d9
 8003c9a:	f7fc fa9b 	bl	80001d4 <__adddf3>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	49bb      	ldr	r1, [pc, #748]	; (8003f94 <__ieee754_pow+0x76c>)
 8003ca6:	f7fc fd75 	bl	8000794 <__aeabi_ddiv>
 8003caa:	ec41 0b1a 	vmov	d10, r0, r1
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	4639      	mov	r1, r7
 8003cb6:	f7fc fc43 	bl	8000540 <__aeabi_dmul>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cc0:	9302      	str	r3, [sp, #8]
 8003cc2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003cc6:	46ab      	mov	fp, r5
 8003cc8:	106d      	asrs	r5, r5, #1
 8003cca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003cce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003cd2:	ec41 0b18 	vmov	d8, r0, r1
 8003cd6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4640      	mov	r0, r8
 8003cde:	4649      	mov	r1, r9
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	f7fc fc2c 	bl	8000540 <__aeabi_dmul>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4630      	mov	r0, r6
 8003cee:	4639      	mov	r1, r7
 8003cf0:	f7fc fa6e 	bl	80001d0 <__aeabi_dsub>
 8003cf4:	ec53 2b19 	vmov	r2, r3, d9
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	460f      	mov	r7, r1
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f7fc fa66 	bl	80001d0 <__aeabi_dsub>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4650      	mov	r0, sl
 8003d0a:	4659      	mov	r1, fp
 8003d0c:	f7fc fa60 	bl	80001d0 <__aeabi_dsub>
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	f7fc fc14 	bl	8000540 <__aeabi_dmul>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4639      	mov	r1, r7
 8003d20:	f7fc fa56 	bl	80001d0 <__aeabi_dsub>
 8003d24:	ec53 2b1a 	vmov	r2, r3, d10
 8003d28:	f7fc fc0a 	bl	8000540 <__aeabi_dmul>
 8003d2c:	ec53 2b18 	vmov	r2, r3, d8
 8003d30:	ec41 0b19 	vmov	d9, r0, r1
 8003d34:	ec51 0b18 	vmov	r0, r1, d8
 8003d38:	f7fc fc02 	bl	8000540 <__aeabi_dmul>
 8003d3c:	a37c      	add	r3, pc, #496	; (adr r3, 8003f30 <__ieee754_pow+0x708>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	4604      	mov	r4, r0
 8003d44:	460d      	mov	r5, r1
 8003d46:	f7fc fbfb 	bl	8000540 <__aeabi_dmul>
 8003d4a:	a37b      	add	r3, pc, #492	; (adr r3, 8003f38 <__ieee754_pow+0x710>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fa40 	bl	80001d4 <__adddf3>
 8003d54:	4622      	mov	r2, r4
 8003d56:	462b      	mov	r3, r5
 8003d58:	f7fc fbf2 	bl	8000540 <__aeabi_dmul>
 8003d5c:	a378      	add	r3, pc, #480	; (adr r3, 8003f40 <__ieee754_pow+0x718>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fa37 	bl	80001d4 <__adddf3>
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	f7fc fbe9 	bl	8000540 <__aeabi_dmul>
 8003d6e:	a376      	add	r3, pc, #472	; (adr r3, 8003f48 <__ieee754_pow+0x720>)
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f7fc fa2e 	bl	80001d4 <__adddf3>
 8003d78:	4622      	mov	r2, r4
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	f7fc fbe0 	bl	8000540 <__aeabi_dmul>
 8003d80:	a373      	add	r3, pc, #460	; (adr r3, 8003f50 <__ieee754_pow+0x728>)
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f7fc fa25 	bl	80001d4 <__adddf3>
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	462b      	mov	r3, r5
 8003d8e:	f7fc fbd7 	bl	8000540 <__aeabi_dmul>
 8003d92:	a371      	add	r3, pc, #452	; (adr r3, 8003f58 <__ieee754_pow+0x730>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f7fc fa1c 	bl	80001d4 <__adddf3>
 8003d9c:	4622      	mov	r2, r4
 8003d9e:	4606      	mov	r6, r0
 8003da0:	460f      	mov	r7, r1
 8003da2:	462b      	mov	r3, r5
 8003da4:	4620      	mov	r0, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	f7fc fbca 	bl	8000540 <__aeabi_dmul>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4630      	mov	r0, r6
 8003db2:	4639      	mov	r1, r7
 8003db4:	f7fc fbc4 	bl	8000540 <__aeabi_dmul>
 8003db8:	4642      	mov	r2, r8
 8003dba:	4604      	mov	r4, r0
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	ec51 0b18 	vmov	r0, r1, d8
 8003dc4:	f7fc fa06 	bl	80001d4 <__adddf3>
 8003dc8:	ec53 2b19 	vmov	r2, r3, d9
 8003dcc:	f7fc fbb8 	bl	8000540 <__aeabi_dmul>
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	462b      	mov	r3, r5
 8003dd4:	f7fc f9fe 	bl	80001d4 <__adddf3>
 8003dd8:	4642      	mov	r2, r8
 8003dda:	4682      	mov	sl, r0
 8003ddc:	468b      	mov	fp, r1
 8003dde:	464b      	mov	r3, r9
 8003de0:	4640      	mov	r0, r8
 8003de2:	4649      	mov	r1, r9
 8003de4:	f7fc fbac 	bl	8000540 <__aeabi_dmul>
 8003de8:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <__ieee754_pow+0x770>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	4606      	mov	r6, r0
 8003dee:	460f      	mov	r7, r1
 8003df0:	f7fc f9f0 	bl	80001d4 <__adddf3>
 8003df4:	4652      	mov	r2, sl
 8003df6:	465b      	mov	r3, fp
 8003df8:	f7fc f9ec 	bl	80001d4 <__adddf3>
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	4604      	mov	r4, r0
 8003e00:	460d      	mov	r5, r1
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4640      	mov	r0, r8
 8003e08:	4649      	mov	r1, r9
 8003e0a:	f7fc fb99 	bl	8000540 <__aeabi_dmul>
 8003e0e:	4b62      	ldr	r3, [pc, #392]	; (8003f98 <__ieee754_pow+0x770>)
 8003e10:	4680      	mov	r8, r0
 8003e12:	4689      	mov	r9, r1
 8003e14:	2200      	movs	r2, #0
 8003e16:	4620      	mov	r0, r4
 8003e18:	4629      	mov	r1, r5
 8003e1a:	f7fc f9d9 	bl	80001d0 <__aeabi_dsub>
 8003e1e:	4632      	mov	r2, r6
 8003e20:	463b      	mov	r3, r7
 8003e22:	f7fc f9d5 	bl	80001d0 <__aeabi_dsub>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	f7fc f9cf 	bl	80001d0 <__aeabi_dsub>
 8003e32:	ec53 2b18 	vmov	r2, r3, d8
 8003e36:	f7fc fb83 	bl	8000540 <__aeabi_dmul>
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	460f      	mov	r7, r1
 8003e40:	462b      	mov	r3, r5
 8003e42:	ec51 0b19 	vmov	r0, r1, d9
 8003e46:	f7fc fb7b 	bl	8000540 <__aeabi_dmul>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4630      	mov	r0, r6
 8003e50:	4639      	mov	r1, r7
 8003e52:	f7fc f9bf 	bl	80001d4 <__adddf3>
 8003e56:	4606      	mov	r6, r0
 8003e58:	460f      	mov	r7, r1
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4640      	mov	r0, r8
 8003e60:	4649      	mov	r1, r9
 8003e62:	f7fc f9b7 	bl	80001d4 <__adddf3>
 8003e66:	a33e      	add	r3, pc, #248	; (adr r3, 8003f60 <__ieee754_pow+0x738>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	4604      	mov	r4, r0
 8003e70:	460d      	mov	r5, r1
 8003e72:	f7fc fb65 	bl	8000540 <__aeabi_dmul>
 8003e76:	4642      	mov	r2, r8
 8003e78:	ec41 0b18 	vmov	d8, r0, r1
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7fc f9a5 	bl	80001d0 <__aeabi_dsub>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	4639      	mov	r1, r7
 8003e8e:	f7fc f99f 	bl	80001d0 <__aeabi_dsub>
 8003e92:	a335      	add	r3, pc, #212	; (adr r3, 8003f68 <__ieee754_pow+0x740>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc fb52 	bl	8000540 <__aeabi_dmul>
 8003e9c:	a334      	add	r3, pc, #208	; (adr r3, 8003f70 <__ieee754_pow+0x748>)
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460f      	mov	r7, r1
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7fc fb49 	bl	8000540 <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	f7fc f98d 	bl	80001d4 <__adddf3>
 8003eba:	9a07      	ldr	r2, [sp, #28]
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <__ieee754_pow+0x774>)
 8003ebe:	4413      	add	r3, r2
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc f986 	bl	80001d4 <__adddf3>
 8003ec8:	4682      	mov	sl, r0
 8003eca:	9805      	ldr	r0, [sp, #20]
 8003ecc:	468b      	mov	fp, r1
 8003ece:	f7fc facd 	bl	800046c <__aeabi_i2d>
 8003ed2:	9a07      	ldr	r2, [sp, #28]
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <__ieee754_pow+0x778>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003edc:	4606      	mov	r6, r0
 8003ede:	460f      	mov	r7, r1
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	465b      	mov	r3, fp
 8003ee4:	ec51 0b18 	vmov	r0, r1, d8
 8003ee8:	f7fc f974 	bl	80001d4 <__adddf3>
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	f7fc f970 	bl	80001d4 <__adddf3>
 8003ef4:	4632      	mov	r2, r6
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	f7fc f96c 	bl	80001d4 <__adddf3>
 8003efc:	2000      	movs	r0, #0
 8003efe:	4632      	mov	r2, r6
 8003f00:	463b      	mov	r3, r7
 8003f02:	4604      	mov	r4, r0
 8003f04:	460d      	mov	r5, r1
 8003f06:	f7fc f963 	bl	80001d0 <__aeabi_dsub>
 8003f0a:	4642      	mov	r2, r8
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	f7fc f95f 	bl	80001d0 <__aeabi_dsub>
 8003f12:	ec53 2b18 	vmov	r2, r3, d8
 8003f16:	f7fc f95b 	bl	80001d0 <__aeabi_dsub>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4650      	mov	r0, sl
 8003f20:	4659      	mov	r1, fp
 8003f22:	e610      	b.n	8003b46 <__ieee754_pow+0x31e>
 8003f24:	2401      	movs	r4, #1
 8003f26:	e6a1      	b.n	8003c6c <__ieee754_pow+0x444>
 8003f28:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8003f78 <__ieee754_pow+0x750>
 8003f2c:	e617      	b.n	8003b5e <__ieee754_pow+0x336>
 8003f2e:	bf00      	nop
 8003f30:	4a454eef 	.word	0x4a454eef
 8003f34:	3fca7e28 	.word	0x3fca7e28
 8003f38:	93c9db65 	.word	0x93c9db65
 8003f3c:	3fcd864a 	.word	0x3fcd864a
 8003f40:	a91d4101 	.word	0xa91d4101
 8003f44:	3fd17460 	.word	0x3fd17460
 8003f48:	518f264d 	.word	0x518f264d
 8003f4c:	3fd55555 	.word	0x3fd55555
 8003f50:	db6fabff 	.word	0xdb6fabff
 8003f54:	3fdb6db6 	.word	0x3fdb6db6
 8003f58:	33333303 	.word	0x33333303
 8003f5c:	3fe33333 	.word	0x3fe33333
 8003f60:	e0000000 	.word	0xe0000000
 8003f64:	3feec709 	.word	0x3feec709
 8003f68:	dc3a03fd 	.word	0xdc3a03fd
 8003f6c:	3feec709 	.word	0x3feec709
 8003f70:	145b01f5 	.word	0x145b01f5
 8003f74:	be3e2fe0 	.word	0xbe3e2fe0
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	3ff00000 	.word	0x3ff00000
 8003f80:	7ff00000 	.word	0x7ff00000
 8003f84:	43400000 	.word	0x43400000
 8003f88:	0003988e 	.word	0x0003988e
 8003f8c:	000bb679 	.word	0x000bb679
 8003f90:	080045a8 	.word	0x080045a8
 8003f94:	3ff00000 	.word	0x3ff00000
 8003f98:	40080000 	.word	0x40080000
 8003f9c:	080045c8 	.word	0x080045c8
 8003fa0:	080045b8 	.word	0x080045b8
 8003fa4:	a3b5      	add	r3, pc, #724	; (adr r3, 800427c <__ieee754_pow+0xa54>)
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	f7fc f911 	bl	80001d4 <__adddf3>
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	ec41 0b1a 	vmov	d10, r0, r1
 8003fb8:	462b      	mov	r3, r5
 8003fba:	4630      	mov	r0, r6
 8003fbc:	4639      	mov	r1, r7
 8003fbe:	f7fc f907 	bl	80001d0 <__aeabi_dsub>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	ec51 0b1a 	vmov	r0, r1, d10
 8003fca:	f7fc fd49 	bl	8000a60 <__aeabi_dcmpgt>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	f47f ae04 	bne.w	8003bdc <__ieee754_pow+0x3b4>
 8003fd4:	4aa4      	ldr	r2, [pc, #656]	; (8004268 <__ieee754_pow+0xa40>)
 8003fd6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	f340 8108 	ble.w	80041f0 <__ieee754_pow+0x9c8>
 8003fe0:	151b      	asrs	r3, r3, #20
 8003fe2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003fe6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003fea:	fa4a f303 	asr.w	r3, sl, r3
 8003fee:	445b      	add	r3, fp
 8003ff0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003ff4:	4e9d      	ldr	r6, [pc, #628]	; (800426c <__ieee754_pow+0xa44>)
 8003ff6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003ffa:	4116      	asrs	r6, r2
 8003ffc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004000:	2000      	movs	r0, #0
 8004002:	ea23 0106 	bic.w	r1, r3, r6
 8004006:	f1c2 0214 	rsb	r2, r2, #20
 800400a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800400e:	fa4a fa02 	asr.w	sl, sl, r2
 8004012:	f1bb 0f00 	cmp.w	fp, #0
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4620      	mov	r0, r4
 800401c:	4629      	mov	r1, r5
 800401e:	bfb8      	it	lt
 8004020:	f1ca 0a00 	rsblt	sl, sl, #0
 8004024:	f7fc f8d4 	bl	80001d0 <__aeabi_dsub>
 8004028:	ec41 0b19 	vmov	d9, r0, r1
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	ec51 0b19 	vmov	r0, r1, d9
 8004034:	f7fc f8ce 	bl	80001d4 <__adddf3>
 8004038:	a37b      	add	r3, pc, #492	; (adr r3, 8004228 <__ieee754_pow+0xa00>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	2000      	movs	r0, #0
 8004040:	4604      	mov	r4, r0
 8004042:	460d      	mov	r5, r1
 8004044:	f7fc fa7c 	bl	8000540 <__aeabi_dmul>
 8004048:	ec53 2b19 	vmov	r2, r3, d9
 800404c:	4606      	mov	r6, r0
 800404e:	460f      	mov	r7, r1
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc f8bc 	bl	80001d0 <__aeabi_dsub>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4640      	mov	r0, r8
 800405e:	4649      	mov	r1, r9
 8004060:	f7fc f8b6 	bl	80001d0 <__aeabi_dsub>
 8004064:	a372      	add	r3, pc, #456	; (adr r3, 8004230 <__ieee754_pow+0xa08>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc fa69 	bl	8000540 <__aeabi_dmul>
 800406e:	a372      	add	r3, pc, #456	; (adr r3, 8004238 <__ieee754_pow+0xa10>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	4680      	mov	r8, r0
 8004076:	4689      	mov	r9, r1
 8004078:	4620      	mov	r0, r4
 800407a:	4629      	mov	r1, r5
 800407c:	f7fc fa60 	bl	8000540 <__aeabi_dmul>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4640      	mov	r0, r8
 8004086:	4649      	mov	r1, r9
 8004088:	f7fc f8a4 	bl	80001d4 <__adddf3>
 800408c:	4604      	mov	r4, r0
 800408e:	460d      	mov	r5, r1
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4630      	mov	r0, r6
 8004096:	4639      	mov	r1, r7
 8004098:	f7fc f89c 	bl	80001d4 <__adddf3>
 800409c:	4632      	mov	r2, r6
 800409e:	463b      	mov	r3, r7
 80040a0:	4680      	mov	r8, r0
 80040a2:	4689      	mov	r9, r1
 80040a4:	f7fc f894 	bl	80001d0 <__aeabi_dsub>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4620      	mov	r0, r4
 80040ae:	4629      	mov	r1, r5
 80040b0:	f7fc f88e 	bl	80001d0 <__aeabi_dsub>
 80040b4:	4642      	mov	r2, r8
 80040b6:	4606      	mov	r6, r0
 80040b8:	460f      	mov	r7, r1
 80040ba:	464b      	mov	r3, r9
 80040bc:	4640      	mov	r0, r8
 80040be:	4649      	mov	r1, r9
 80040c0:	f7fc fa3e 	bl	8000540 <__aeabi_dmul>
 80040c4:	a35e      	add	r3, pc, #376	; (adr r3, 8004240 <__ieee754_pow+0xa18>)
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	4604      	mov	r4, r0
 80040cc:	460d      	mov	r5, r1
 80040ce:	f7fc fa37 	bl	8000540 <__aeabi_dmul>
 80040d2:	a35d      	add	r3, pc, #372	; (adr r3, 8004248 <__ieee754_pow+0xa20>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f87a 	bl	80001d0 <__aeabi_dsub>
 80040dc:	4622      	mov	r2, r4
 80040de:	462b      	mov	r3, r5
 80040e0:	f7fc fa2e 	bl	8000540 <__aeabi_dmul>
 80040e4:	a35a      	add	r3, pc, #360	; (adr r3, 8004250 <__ieee754_pow+0xa28>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc f873 	bl	80001d4 <__adddf3>
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	f7fc fa25 	bl	8000540 <__aeabi_dmul>
 80040f6:	a358      	add	r3, pc, #352	; (adr r3, 8004258 <__ieee754_pow+0xa30>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc f868 	bl	80001d0 <__aeabi_dsub>
 8004100:	4622      	mov	r2, r4
 8004102:	462b      	mov	r3, r5
 8004104:	f7fc fa1c 	bl	8000540 <__aeabi_dmul>
 8004108:	a355      	add	r3, pc, #340	; (adr r3, 8004260 <__ieee754_pow+0xa38>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc f861 	bl	80001d4 <__adddf3>
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	f7fc fa13 	bl	8000540 <__aeabi_dmul>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4640      	mov	r0, r8
 8004120:	4649      	mov	r1, r9
 8004122:	f7fc f855 	bl	80001d0 <__aeabi_dsub>
 8004126:	4604      	mov	r4, r0
 8004128:	460d      	mov	r5, r1
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4640      	mov	r0, r8
 8004130:	4649      	mov	r1, r9
 8004132:	f7fc fa05 	bl	8000540 <__aeabi_dmul>
 8004136:	2200      	movs	r2, #0
 8004138:	ec41 0b19 	vmov	d9, r0, r1
 800413c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004140:	4620      	mov	r0, r4
 8004142:	4629      	mov	r1, r5
 8004144:	f7fc f844 	bl	80001d0 <__aeabi_dsub>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	ec51 0b19 	vmov	r0, r1, d9
 8004150:	f7fc fb20 	bl	8000794 <__aeabi_ddiv>
 8004154:	4632      	mov	r2, r6
 8004156:	4604      	mov	r4, r0
 8004158:	460d      	mov	r5, r1
 800415a:	463b      	mov	r3, r7
 800415c:	4640      	mov	r0, r8
 800415e:	4649      	mov	r1, r9
 8004160:	f7fc f9ee 	bl	8000540 <__aeabi_dmul>
 8004164:	4632      	mov	r2, r6
 8004166:	463b      	mov	r3, r7
 8004168:	f7fc f834 	bl	80001d4 <__adddf3>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4620      	mov	r0, r4
 8004172:	4629      	mov	r1, r5
 8004174:	f7fc f82c 	bl	80001d0 <__aeabi_dsub>
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	f7fc f828 	bl	80001d0 <__aeabi_dsub>
 8004180:	460b      	mov	r3, r1
 8004182:	4602      	mov	r2, r0
 8004184:	493a      	ldr	r1, [pc, #232]	; (8004270 <__ieee754_pow+0xa48>)
 8004186:	2000      	movs	r0, #0
 8004188:	f7fc f822 	bl	80001d0 <__aeabi_dsub>
 800418c:	ec41 0b10 	vmov	d0, r0, r1
 8004190:	ee10 3a90 	vmov	r3, s1
 8004194:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419c:	da2b      	bge.n	80041f6 <__ieee754_pow+0x9ce>
 800419e:	4650      	mov	r0, sl
 80041a0:	f000 f966 	bl	8004470 <scalbn>
 80041a4:	ec51 0b10 	vmov	r0, r1, d0
 80041a8:	ec53 2b18 	vmov	r2, r3, d8
 80041ac:	f7ff bbed 	b.w	800398a <__ieee754_pow+0x162>
 80041b0:	4b30      	ldr	r3, [pc, #192]	; (8004274 <__ieee754_pow+0xa4c>)
 80041b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80041b6:	429e      	cmp	r6, r3
 80041b8:	f77f af0c 	ble.w	8003fd4 <__ieee754_pow+0x7ac>
 80041bc:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <__ieee754_pow+0xa50>)
 80041be:	440b      	add	r3, r1
 80041c0:	4303      	orrs	r3, r0
 80041c2:	d009      	beq.n	80041d8 <__ieee754_pow+0x9b0>
 80041c4:	ec51 0b18 	vmov	r0, r1, d8
 80041c8:	2200      	movs	r2, #0
 80041ca:	2300      	movs	r3, #0
 80041cc:	f7fc fc2a 	bl	8000a24 <__aeabi_dcmplt>
 80041d0:	3800      	subs	r0, #0
 80041d2:	bf18      	it	ne
 80041d4:	2001      	movne	r0, #1
 80041d6:	e447      	b.n	8003a68 <__ieee754_pow+0x240>
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	f7fb fff8 	bl	80001d0 <__aeabi_dsub>
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	f7fc fc32 	bl	8000a4c <__aeabi_dcmpge>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	f43f aef3 	beq.w	8003fd4 <__ieee754_pow+0x7ac>
 80041ee:	e7e9      	b.n	80041c4 <__ieee754_pow+0x99c>
 80041f0:	f04f 0a00 	mov.w	sl, #0
 80041f4:	e71a      	b.n	800402c <__ieee754_pow+0x804>
 80041f6:	ec51 0b10 	vmov	r0, r1, d0
 80041fa:	4619      	mov	r1, r3
 80041fc:	e7d4      	b.n	80041a8 <__ieee754_pow+0x980>
 80041fe:	491c      	ldr	r1, [pc, #112]	; (8004270 <__ieee754_pow+0xa48>)
 8004200:	2000      	movs	r0, #0
 8004202:	f7ff bb30 	b.w	8003866 <__ieee754_pow+0x3e>
 8004206:	2000      	movs	r0, #0
 8004208:	2100      	movs	r1, #0
 800420a:	f7ff bb2c 	b.w	8003866 <__ieee754_pow+0x3e>
 800420e:	4630      	mov	r0, r6
 8004210:	4639      	mov	r1, r7
 8004212:	f7ff bb28 	b.w	8003866 <__ieee754_pow+0x3e>
 8004216:	9204      	str	r2, [sp, #16]
 8004218:	f7ff bb7a 	b.w	8003910 <__ieee754_pow+0xe8>
 800421c:	2300      	movs	r3, #0
 800421e:	f7ff bb64 	b.w	80038ea <__ieee754_pow+0xc2>
 8004222:	bf00      	nop
 8004224:	f3af 8000 	nop.w
 8004228:	00000000 	.word	0x00000000
 800422c:	3fe62e43 	.word	0x3fe62e43
 8004230:	fefa39ef 	.word	0xfefa39ef
 8004234:	3fe62e42 	.word	0x3fe62e42
 8004238:	0ca86c39 	.word	0x0ca86c39
 800423c:	be205c61 	.word	0xbe205c61
 8004240:	72bea4d0 	.word	0x72bea4d0
 8004244:	3e663769 	.word	0x3e663769
 8004248:	c5d26bf1 	.word	0xc5d26bf1
 800424c:	3ebbbd41 	.word	0x3ebbbd41
 8004250:	af25de2c 	.word	0xaf25de2c
 8004254:	3f11566a 	.word	0x3f11566a
 8004258:	16bebd93 	.word	0x16bebd93
 800425c:	3f66c16c 	.word	0x3f66c16c
 8004260:	5555553e 	.word	0x5555553e
 8004264:	3fc55555 	.word	0x3fc55555
 8004268:	3fe00000 	.word	0x3fe00000
 800426c:	000fffff 	.word	0x000fffff
 8004270:	3ff00000 	.word	0x3ff00000
 8004274:	4090cbff 	.word	0x4090cbff
 8004278:	3f6f3400 	.word	0x3f6f3400
 800427c:	652b82fe 	.word	0x652b82fe
 8004280:	3c971547 	.word	0x3c971547

08004284 <__ieee754_sqrt>:
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	ec55 4b10 	vmov	r4, r5, d0
 800428c:	4e55      	ldr	r6, [pc, #340]	; (80043e4 <__ieee754_sqrt+0x160>)
 800428e:	43ae      	bics	r6, r5
 8004290:	ee10 0a10 	vmov	r0, s0
 8004294:	ee10 3a10 	vmov	r3, s0
 8004298:	462a      	mov	r2, r5
 800429a:	4629      	mov	r1, r5
 800429c:	d110      	bne.n	80042c0 <__ieee754_sqrt+0x3c>
 800429e:	ee10 2a10 	vmov	r2, s0
 80042a2:	462b      	mov	r3, r5
 80042a4:	f7fc f94c 	bl	8000540 <__aeabi_dmul>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4620      	mov	r0, r4
 80042ae:	4629      	mov	r1, r5
 80042b0:	f7fb ff90 	bl	80001d4 <__adddf3>
 80042b4:	4604      	mov	r4, r0
 80042b6:	460d      	mov	r5, r1
 80042b8:	ec45 4b10 	vmov	d0, r4, r5
 80042bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	dc10      	bgt.n	80042e6 <__ieee754_sqrt+0x62>
 80042c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80042c8:	4330      	orrs	r0, r6
 80042ca:	d0f5      	beq.n	80042b8 <__ieee754_sqrt+0x34>
 80042cc:	b15d      	cbz	r5, 80042e6 <__ieee754_sqrt+0x62>
 80042ce:	ee10 2a10 	vmov	r2, s0
 80042d2:	462b      	mov	r3, r5
 80042d4:	ee10 0a10 	vmov	r0, s0
 80042d8:	f7fb ff7a 	bl	80001d0 <__aeabi_dsub>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	f7fc fa58 	bl	8000794 <__aeabi_ddiv>
 80042e4:	e7e6      	b.n	80042b4 <__ieee754_sqrt+0x30>
 80042e6:	1512      	asrs	r2, r2, #20
 80042e8:	d074      	beq.n	80043d4 <__ieee754_sqrt+0x150>
 80042ea:	07d4      	lsls	r4, r2, #31
 80042ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80042f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80042f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80042f8:	bf5e      	ittt	pl
 80042fa:	0fda      	lsrpl	r2, r3, #31
 80042fc:	005b      	lslpl	r3, r3, #1
 80042fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004302:	2400      	movs	r4, #0
 8004304:	0fda      	lsrs	r2, r3, #31
 8004306:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800430a:	107f      	asrs	r7, r7, #1
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2516      	movs	r5, #22
 8004310:	4620      	mov	r0, r4
 8004312:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004316:	1886      	adds	r6, r0, r2
 8004318:	428e      	cmp	r6, r1
 800431a:	bfde      	ittt	le
 800431c:	1b89      	suble	r1, r1, r6
 800431e:	18b0      	addle	r0, r6, r2
 8004320:	18a4      	addle	r4, r4, r2
 8004322:	0049      	lsls	r1, r1, #1
 8004324:	3d01      	subs	r5, #1
 8004326:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800432a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800432e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004332:	d1f0      	bne.n	8004316 <__ieee754_sqrt+0x92>
 8004334:	462a      	mov	r2, r5
 8004336:	f04f 0e20 	mov.w	lr, #32
 800433a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800433e:	4281      	cmp	r1, r0
 8004340:	eb06 0c05 	add.w	ip, r6, r5
 8004344:	dc02      	bgt.n	800434c <__ieee754_sqrt+0xc8>
 8004346:	d113      	bne.n	8004370 <__ieee754_sqrt+0xec>
 8004348:	459c      	cmp	ip, r3
 800434a:	d811      	bhi.n	8004370 <__ieee754_sqrt+0xec>
 800434c:	f1bc 0f00 	cmp.w	ip, #0
 8004350:	eb0c 0506 	add.w	r5, ip, r6
 8004354:	da43      	bge.n	80043de <__ieee754_sqrt+0x15a>
 8004356:	2d00      	cmp	r5, #0
 8004358:	db41      	blt.n	80043de <__ieee754_sqrt+0x15a>
 800435a:	f100 0801 	add.w	r8, r0, #1
 800435e:	1a09      	subs	r1, r1, r0
 8004360:	459c      	cmp	ip, r3
 8004362:	bf88      	it	hi
 8004364:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004368:	eba3 030c 	sub.w	r3, r3, ip
 800436c:	4432      	add	r2, r6
 800436e:	4640      	mov	r0, r8
 8004370:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004374:	f1be 0e01 	subs.w	lr, lr, #1
 8004378:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800437c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004380:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004384:	d1db      	bne.n	800433e <__ieee754_sqrt+0xba>
 8004386:	430b      	orrs	r3, r1
 8004388:	d006      	beq.n	8004398 <__ieee754_sqrt+0x114>
 800438a:	1c50      	adds	r0, r2, #1
 800438c:	bf13      	iteet	ne
 800438e:	3201      	addne	r2, #1
 8004390:	3401      	addeq	r4, #1
 8004392:	4672      	moveq	r2, lr
 8004394:	f022 0201 	bicne.w	r2, r2, #1
 8004398:	1063      	asrs	r3, r4, #1
 800439a:	0852      	lsrs	r2, r2, #1
 800439c:	07e1      	lsls	r1, r4, #31
 800439e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80043a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80043a6:	bf48      	it	mi
 80043a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80043ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80043b0:	4614      	mov	r4, r2
 80043b2:	e781      	b.n	80042b8 <__ieee754_sqrt+0x34>
 80043b4:	0ad9      	lsrs	r1, r3, #11
 80043b6:	3815      	subs	r0, #21
 80043b8:	055b      	lsls	r3, r3, #21
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d0fa      	beq.n	80043b4 <__ieee754_sqrt+0x130>
 80043be:	02cd      	lsls	r5, r1, #11
 80043c0:	d50a      	bpl.n	80043d8 <__ieee754_sqrt+0x154>
 80043c2:	f1c2 0420 	rsb	r4, r2, #32
 80043c6:	fa23 f404 	lsr.w	r4, r3, r4
 80043ca:	1e55      	subs	r5, r2, #1
 80043cc:	4093      	lsls	r3, r2
 80043ce:	4321      	orrs	r1, r4
 80043d0:	1b42      	subs	r2, r0, r5
 80043d2:	e78a      	b.n	80042ea <__ieee754_sqrt+0x66>
 80043d4:	4610      	mov	r0, r2
 80043d6:	e7f0      	b.n	80043ba <__ieee754_sqrt+0x136>
 80043d8:	0049      	lsls	r1, r1, #1
 80043da:	3201      	adds	r2, #1
 80043dc:	e7ef      	b.n	80043be <__ieee754_sqrt+0x13a>
 80043de:	4680      	mov	r8, r0
 80043e0:	e7bd      	b.n	800435e <__ieee754_sqrt+0xda>
 80043e2:	bf00      	nop
 80043e4:	7ff00000 	.word	0x7ff00000

080043e8 <with_errno>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	4604      	mov	r4, r0
 80043ec:	460d      	mov	r5, r1
 80043ee:	4616      	mov	r6, r2
 80043f0:	f7ff f930 	bl	8003654 <__errno>
 80043f4:	4629      	mov	r1, r5
 80043f6:	6006      	str	r6, [r0, #0]
 80043f8:	4620      	mov	r0, r4
 80043fa:	bd70      	pop	{r4, r5, r6, pc}

080043fc <xflow>:
 80043fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043fe:	4614      	mov	r4, r2
 8004400:	461d      	mov	r5, r3
 8004402:	b108      	cbz	r0, 8004408 <xflow+0xc>
 8004404:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004408:	e9cd 2300 	strd	r2, r3, [sp]
 800440c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004410:	4620      	mov	r0, r4
 8004412:	4629      	mov	r1, r5
 8004414:	f7fc f894 	bl	8000540 <__aeabi_dmul>
 8004418:	2222      	movs	r2, #34	; 0x22
 800441a:	b003      	add	sp, #12
 800441c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004420:	f7ff bfe2 	b.w	80043e8 <with_errno>

08004424 <__math_uflow>:
 8004424:	b508      	push	{r3, lr}
 8004426:	2200      	movs	r2, #0
 8004428:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800442c:	f7ff ffe6 	bl	80043fc <xflow>
 8004430:	ec41 0b10 	vmov	d0, r0, r1
 8004434:	bd08      	pop	{r3, pc}

08004436 <__math_oflow>:
 8004436:	b508      	push	{r3, lr}
 8004438:	2200      	movs	r2, #0
 800443a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800443e:	f7ff ffdd 	bl	80043fc <xflow>
 8004442:	ec41 0b10 	vmov	d0, r0, r1
 8004446:	bd08      	pop	{r3, pc}

08004448 <fabs>:
 8004448:	ec51 0b10 	vmov	r0, r1, d0
 800444c:	ee10 2a10 	vmov	r2, s0
 8004450:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004454:	ec43 2b10 	vmov	d0, r2, r3
 8004458:	4770      	bx	lr

0800445a <finite>:
 800445a:	b082      	sub	sp, #8
 800445c:	ed8d 0b00 	vstr	d0, [sp]
 8004460:	9801      	ldr	r0, [sp, #4]
 8004462:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004466:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800446a:	0fc0      	lsrs	r0, r0, #31
 800446c:	b002      	add	sp, #8
 800446e:	4770      	bx	lr

08004470 <scalbn>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	ec55 4b10 	vmov	r4, r5, d0
 8004476:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800447a:	4606      	mov	r6, r0
 800447c:	462b      	mov	r3, r5
 800447e:	b99a      	cbnz	r2, 80044a8 <scalbn+0x38>
 8004480:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004484:	4323      	orrs	r3, r4
 8004486:	d036      	beq.n	80044f6 <scalbn+0x86>
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <scalbn+0x100>)
 800448a:	4629      	mov	r1, r5
 800448c:	ee10 0a10 	vmov	r0, s0
 8004490:	2200      	movs	r2, #0
 8004492:	f7fc f855 	bl	8000540 <__aeabi_dmul>
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <scalbn+0x104>)
 8004498:	429e      	cmp	r6, r3
 800449a:	4604      	mov	r4, r0
 800449c:	460d      	mov	r5, r1
 800449e:	da10      	bge.n	80044c2 <scalbn+0x52>
 80044a0:	a32b      	add	r3, pc, #172	; (adr r3, 8004550 <scalbn+0xe0>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	e03a      	b.n	800451e <scalbn+0xae>
 80044a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80044ac:	428a      	cmp	r2, r1
 80044ae:	d10c      	bne.n	80044ca <scalbn+0x5a>
 80044b0:	ee10 2a10 	vmov	r2, s0
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fb fe8c 	bl	80001d4 <__adddf3>
 80044bc:	4604      	mov	r4, r0
 80044be:	460d      	mov	r5, r1
 80044c0:	e019      	b.n	80044f6 <scalbn+0x86>
 80044c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80044c6:	460b      	mov	r3, r1
 80044c8:	3a36      	subs	r2, #54	; 0x36
 80044ca:	4432      	add	r2, r6
 80044cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80044d0:	428a      	cmp	r2, r1
 80044d2:	dd08      	ble.n	80044e6 <scalbn+0x76>
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	a120      	add	r1, pc, #128	; (adr r1, 8004558 <scalbn+0xe8>)
 80044d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044dc:	da1c      	bge.n	8004518 <scalbn+0xa8>
 80044de:	a120      	add	r1, pc, #128	; (adr r1, 8004560 <scalbn+0xf0>)
 80044e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044e4:	e018      	b.n	8004518 <scalbn+0xa8>
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	dd08      	ble.n	80044fc <scalbn+0x8c>
 80044ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80044ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80044f6:	ec45 4b10 	vmov	d0, r4, r5
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004500:	da19      	bge.n	8004536 <scalbn+0xc6>
 8004502:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004506:	429e      	cmp	r6, r3
 8004508:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800450c:	dd0a      	ble.n	8004524 <scalbn+0xb4>
 800450e:	a112      	add	r1, pc, #72	; (adr r1, 8004558 <scalbn+0xe8>)
 8004510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e2      	bne.n	80044de <scalbn+0x6e>
 8004518:	a30f      	add	r3, pc, #60	; (adr r3, 8004558 <scalbn+0xe8>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fc f80f 	bl	8000540 <__aeabi_dmul>
 8004522:	e7cb      	b.n	80044bc <scalbn+0x4c>
 8004524:	a10a      	add	r1, pc, #40	; (adr r1, 8004550 <scalbn+0xe0>)
 8004526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0b8      	beq.n	80044a0 <scalbn+0x30>
 800452e:	a10e      	add	r1, pc, #56	; (adr r1, 8004568 <scalbn+0xf8>)
 8004530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004534:	e7b4      	b.n	80044a0 <scalbn+0x30>
 8004536:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800453a:	3236      	adds	r2, #54	; 0x36
 800453c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004540:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004544:	4620      	mov	r0, r4
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <scalbn+0x108>)
 8004548:	2200      	movs	r2, #0
 800454a:	e7e8      	b.n	800451e <scalbn+0xae>
 800454c:	f3af 8000 	nop.w
 8004550:	c2f8f359 	.word	0xc2f8f359
 8004554:	01a56e1f 	.word	0x01a56e1f
 8004558:	8800759c 	.word	0x8800759c
 800455c:	7e37e43c 	.word	0x7e37e43c
 8004560:	8800759c 	.word	0x8800759c
 8004564:	fe37e43c 	.word	0xfe37e43c
 8004568:	c2f8f359 	.word	0xc2f8f359
 800456c:	81a56e1f 	.word	0x81a56e1f
 8004570:	43500000 	.word	0x43500000
 8004574:	ffff3cb0 	.word	0xffff3cb0
 8004578:	3c900000 	.word	0x3c900000

0800457c <_init>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr

08004588 <_fini>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr
